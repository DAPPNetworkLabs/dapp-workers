//SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.7.0 <0.9.0;

import "./interfaces/DappWorkersInterface.sol";
import "./interfaces/INexus.sol";

import "hardhat/console.sol";

contract Consumer is DappWorkersInterface {
    /**
    * Public counter variable
    */
    uint public counter;

    /**
    * Use an interval in seconds and a timestamp to slow execution of Upkeep
    */
    uint public immutable interval;
    uint public lastTimeStamp;
    INexus public nexus;

    constructor(uint updateInterval, address _nexus) {
      interval = updateInterval;
      lastTimeStamp = block.timestamp;

      nexus = INexus(_nexus);

      counter = 0;
    }

    function runJob() external {
        string[] memory arr = new string[](1);
        arr[0] = "target/wasm32-wasi/release/test";
        nexus.run(INexus.runArgs(address(this),"wasmrunner","job","",true,arr));
    }

    function setQuorum(address consumer, address[] calldata dsps) external {
        nexus.setQuorum(consumer,dsps);
    }

    function _dspcallback(uint val, string calldata outputFS) external {
        counter = val;
    }

    function checkWork(bytes calldata /* checkData */) external override returns (bool upkeepNeeded, bytes memory /* performWork */) {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performWork(bytes calldata /* performWork */) external override {
        lastTimeStamp = block.timestamp;
        counter = counter + 1;
        // We don't use the performWork in this example. The performWork is generated by the Keeper's call to your checkUpkeep function
    }
}