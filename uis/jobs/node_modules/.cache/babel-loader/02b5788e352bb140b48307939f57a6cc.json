{"ast":null,"code":"import Web3 from 'web3';\nimport NexusJSON from '../../abi/Nexus.json';\nconst jobs = [];\nconst services = [];\nconst provider = new Web3.providers.WebsocketProvider('ws://localhost:8545');\nconst web3 = new Web3(provider);\nconst contractAddress = \"0x94D387F50569200aDACFd903345D077ef6ABcE11\";\nconst contract = new web3.eth.Contract(NexusJSON.abi, contractAddress);\nconst ethereum = window.ethereum;\n\nconst returnAbi = func => {\n  return NexusJSON.abi.find(el => el.name == func && el.type == \"function\");\n};\n\nconst subscribeContractEvent = (eventName, thisObject) => {\n  contract.once(eventName, function (error, event) {\n    console.log({\n      eventName,\n      event,\n      error\n    });\n    thisObject.setState({\n      events: [...thisObject.state.events, {\n        eventName,\n        event,\n        error\n      }]\n    });\n  });\n};\n\nconst fetchLastJob = async () => {\n  return await contract.methods.lastJobID().call();\n};\n\nconst fetchJobs = async thisObject => {\n  for (let i = 0; i < (await fetchLastJob()); i++) {\n    const job = await contract.methods.jobs(i).call();\n    jobs.push(job);\n  }\n\n  thisObject.setState({\n    jobs: JSON.stringify(jobs)\n  });\n};\n\nconst fetchServices = async thisObject => {\n  for (let i = 0; i < (await fetchLastJob()); i++) {\n    const job = await contract.methods.services(i).call();\n    services.push(job);\n  }\n\n  thisObject.setState({\n    services: JSON.stringify(services)\n  });\n};\n\nconst fetchJobImage = async thisObject => {\n  const imageName = await contract.methods.getDockerImage(thisObject.state.getDockerImage.imageName).call();\n  thisObject.setState({\n    image: imageName\n  });\n};\n\nconst fetchIsImageApprovedForDSP = async thisObject => {\n  const approvedImage = await contract.methods.isImageApprovedForDSP(thisObject.state.isImageApprovedForDSP.imageName).call();\n  thisObject.setState({\n    approvedImage\n  });\n};\n\nconst fetchPortForDSP = async thisObject => {\n  const port = await contract.methods.getPortForDSP(thisObject.state.getPortForDSP.jobID, thisObject.state.getPortForDSP.dsp).call();\n  thisObject.setState({\n    port\n  });\n};\n\nconst fetchEndpointForDSP = async thisObject => {\n  const endpoint = await contract.methods.getDSPEndpoint(thisObject.state.getDSPEndpoint.dsp).call();\n  thisObject.setState({\n    endpoint\n  });\n};\n\nconst fetchDspInfo = async dsp => {\n  console.log(await contract.methods.registeredDSPs(dsp).call()); // return await contract.methods.registeredDSPs(dsp).call();\n};\n\nconst fetchDspData = async thisObject => {\n  const dspData = await contract.methods.dspData(thisObject.state.dspData.account, thisObject.state.dspData.dsp).call();\n  thisObject.setState({\n    dspData\n  });\n};\n\nconst fetchConsumerData = async consumer => {\n  console.log(await contract.methods.consumerData(consumer).call()); // return await contract.methods.consumerData(consumer).call();\n};\n\nconst fetchDockerImage = async image => {\n  console.log(await contract.methods.dockerImages(image).call()); // return await contract.methods.dockerImages(image).call();\n};\n\nconst postJobOrService = async thisObject => {\n  const abi = returnAbi(\"run\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.run.consumer, thisObject.state.run.imageName, thisObject.state.run.inputFS, thisObject.state.run.args]);\n  await runTrx(data, [\"Run\"], thisObject);\n};\n\nconst runJob = async thisObject => {\n  const abi = returnAbi(\"jobCallback\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.runJob.jobId, thisObject.state.runJob.outputFS, thisObject.state.runJob.dapps]);\n  await runTrx(data, [\"JobResult\", \"JobDone\"], thisObject);\n};\n\nconst runService = async thisObject => {\n  const abi = returnAbi(\"serviceCallback\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.runService.jobId, thisObject.state.runService.port, thisObject.state.runService.serviceDapps]);\n  await runTrx(data, [\"ServiceRunning\"], thisObject);\n};\n\nconst setDockerImage = async thisObject => {\n  const abi = returnAbi(\"setDockerImage\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.setDockerImage.imageName, thisObject.state.setDockerImage.imageAddress, thisObject.state.setDockerImage.imageHash, thisObject.state.setDockerImage.imageType]);\n  await runTrx(data, [\"DockerSet\"], thisObject);\n};\n\nconst approveDockerImage = async thisObject => {\n  const abi = returnAbi(\"approveDockerForDSP\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.approveDocker.imageName]);\n  await runTrx(data, [\"DockerApprovalChanged\"], thisObject);\n};\n\nconst unapproveDockerImage = async thisObject => {\n  const abi = returnAbi(\"unapproveDockerForDSP\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.unapproveDockerForDSP.imageName]);\n  await runTrx(data, [\"DockerApprovalChanged\"], thisObject);\n};\n\nconst deprecateDSP = async thisObject => {\n  const abi = returnAbi(\"deprecateDSP\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, []);\n  await runTrx(data, [\"DSPStatusChanged\"], thisObject);\n};\n\nconst regDSP = async thisObject => {\n  const abi = returnAbi(\"regDSP\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.regDSP.endpoint]);\n  await runTrx(data, [\"DSPStatusChanged\"], thisObject);\n};\n\nconst claimFor = async thisObject => {\n  const abi = returnAbi(\"claimFor\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.claimFor._consumer, thisObject.state.claimFor._dsp]);\n  await runTrx(data, [\"ClaimedGas\"], thisObject);\n};\n\nconst sellGas = async thisObject => {\n  const abi = returnAbi(\"sellGas\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.sellGas._amountToSell, thisObject.state.sellGas._dsp]);\n  await runTrx(data, [\"SoldGas\"], thisObject);\n};\n\nconst buyGasFor = async thisObject => {\n  const abi = returnAbi(\"buyGasFor\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.buyGasFor._amount, thisObject.state.buyGasFor._consumer, thisObject.state.buyGasFor._dsp]);\n  await runTrx(data, [\"BoughtGas\"], thisObject);\n};\n\nconst setConsumerCallback = async thisObject => {\n  const abi = returnAbi(\"setConsumerCallback\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.setConsumerCallback.enabled]);\n  await runTrx(data, [], thisObject);\n};\n\nconst setConsumerPermissions = async thisObject => {\n  const abi = returnAbi(\"setConsumerPermissions\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.setConsumerPermissions.owner]);\n  await runTrx(data, [], thisObject);\n};\n\nconst setQuorum = async thisObject => {\n  const abi = returnAbi(\"setQuorum\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.setQuorum.consumer, thisObject.state.setQuorum.dsps]);\n  await runTrx(data, [], thisObject);\n};\n\nconst jobError = async thisObject => {\n  const abi = returnAbi(\"jobError\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, []);\n  await runTrx(data, [], thisObject);\n};\n\nconst serviceError = async thisObject => {\n  const abi = returnAbi(\"serviceError\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, []);\n  await runTrx(data, [], thisObject);\n};\n\nconst runTrx = async (data, events, thisObject) => {\n  const trxInfo = {\n    trxHash: null,\n    error: ''\n  };\n  const transactionParameters = {\n    nonce: '0x00',\n    gasPrice: '2000000000',\n    gasLimit: '21000',\n    to: contractAddress,\n    from: ethereum.selectedAddress,\n    value: '0x00',\n    data,\n    chainId: '0x3' // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n\n  };\n\n  if (events.length) {\n    for (const name of events) {\n      subscribeContractEvent(name, thisObject);\n    }\n  }\n\n  await ethereum.request({\n    method: 'eth_sendTransaction',\n    params: [transactionParameters]\n  }).then(result => {\n    trxInfo.trxHash = result;\n  }).catch(error => {\n    trxInfo.error = error;\n  });\n  thisObject.setState({\n    trxInfo\n  });\n};\n\nexport default {\n  fetchJobs,\n  fetchServices,\n  fetchJobImage,\n  fetchIsImageApprovedForDSP,\n  fetchPortForDSP,\n  fetchEndpointForDSP,\n  fetchDspInfo,\n  fetchDspData,\n  fetchConsumerData,\n  fetchDockerImage,\n  postJobOrService,\n  runJob,\n  runService,\n  setDockerImage,\n  approveDockerImage,\n  unapproveDockerImage,\n  deprecateDSP,\n  regDSP,\n  claimFor,\n  sellGas,\n  buyGasFor,\n  setConsumerCallback,\n  setConsumerPermissions,\n  setQuorum,\n  jobError,\n  serviceError\n};","map":{"version":3,"sources":["/Users/natanaelprudhomme/Workspaces/dapp-workers/uis/jobs/src/lib/web3/index.js"],"names":["Web3","NexusJSON","jobs","services","provider","providers","WebsocketProvider","web3","contractAddress","contract","eth","Contract","abi","ethereum","window","returnAbi","func","find","el","name","type","subscribeContractEvent","eventName","thisObject","once","error","event","console","log","setState","events","state","fetchLastJob","methods","lastJobID","call","fetchJobs","i","job","push","JSON","stringify","fetchServices","fetchJobImage","imageName","getDockerImage","image","fetchIsImageApprovedForDSP","approvedImage","isImageApprovedForDSP","fetchPortForDSP","port","getPortForDSP","jobID","dsp","fetchEndpointForDSP","endpoint","getDSPEndpoint","fetchDspInfo","registeredDSPs","fetchDspData","dspData","account","fetchConsumerData","consumer","consumerData","fetchDockerImage","dockerImages","postJobOrService","data","encodeFunctionCall","run","inputFS","args","runTrx","runJob","jobId","outputFS","dapps","runService","serviceDapps","setDockerImage","imageAddress","imageHash","imageType","approveDockerImage","approveDocker","unapproveDockerImage","unapproveDockerForDSP","deprecateDSP","regDSP","claimFor","_consumer","_dsp","sellGas","_amountToSell","buyGasFor","_amount","setConsumerCallback","enabled","setConsumerPermissions","owner","setQuorum","dsps","jobError","serviceError","trxInfo","trxHash","transactionParameters","nonce","gasPrice","gasLimit","to","from","selectedAddress","value","chainId","length","request","method","params","then","result","catch"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\nimport NexusJSON from '../../abi/Nexus.json';\n\nconst jobs = [];\nconst services = [];\nconst provider = new Web3.providers.WebsocketProvider('ws://localhost:8545');\nconst web3 = new Web3(provider);\nconst contractAddress = \"0x94D387F50569200aDACFd903345D077ef6ABcE11\";\nconst contract = new web3.eth.Contract(NexusJSON.abi,contractAddress);\nconst ethereum = window.ethereum;\n\nconst returnAbi = (func) => {\n    return NexusJSON.abi.find(el => el.name == func && el.type == \"function\");\n}\n\nconst subscribeContractEvent = (eventName,thisObject) => {\n    contract.once(eventName, function(error, event){\n        console.log({ eventName, event, error });\n        thisObject.setState({events: [...thisObject.state.events, { eventName, event, error }]});\n    });\n}\n\nconst fetchLastJob = async () => {\n    return await contract.methods.lastJobID().call();\n}\n\nconst fetchJobs = async (thisObject) => {\n    for(let i=0; i < await fetchLastJob(); i++) {\n        const job = await contract.methods.jobs(i).call();\n        jobs.push(job);\n    }\n    thisObject.setState({jobs: JSON.stringify(jobs)});\n}\n\nconst fetchServices = async (thisObject) => {\n    for(let i=0; i < await fetchLastJob(); i++) {\n        const job = await contract.methods.services(i).call();\n        services.push(job);\n    }\n    thisObject.setState({services: JSON.stringify(services)});\n}\n\nconst fetchJobImage = async (thisObject) => {\n    const imageName = await contract.methods.getDockerImage(\n        thisObject.state.getDockerImage.imageName\n    ).call();\n    thisObject.setState({image: imageName});\n}\n\nconst fetchIsImageApprovedForDSP = async (thisObject) => {\n    const approvedImage = await contract.methods.isImageApprovedForDSP(\n        thisObject.state.isImageApprovedForDSP.imageName\n    ).call();\n    thisObject.setState({approvedImage});\n}\n\nconst fetchPortForDSP = async (thisObject) => {\n    const port = await contract.methods.getPortForDSP(\n        thisObject.state.getPortForDSP.jobID,\n        thisObject.state.getPortForDSP.dsp\n    ).call();\n    thisObject.setState({port});\n}\n\nconst fetchEndpointForDSP = async (thisObject) => {\n    const endpoint = await contract.methods.getDSPEndpoint(\n        thisObject.state.getDSPEndpoint.dsp\n    ).call();\n    thisObject.setState({endpoint});\n}\n\nconst fetchDspInfo = async (dsp) => {\n    console.log(await contract.methods.registeredDSPs(dsp).call());\n    // return await contract.methods.registeredDSPs(dsp).call();\n}\n\nconst fetchDspData = async (thisObject) => {\n    const dspData = await contract.methods.dspData(\n        thisObject.state.dspData.account,\n        thisObject.state.dspData.dsp\n    ).call();\n    thisObject.setState({dspData});\n}\n\nconst fetchConsumerData = async (consumer) => {\n    console.log(await contract.methods.consumerData(consumer).call());\n    // return await contract.methods.consumerData(consumer).call();\n}\n\nconst fetchDockerImage = async (image) => {\n    console.log(await contract.methods.dockerImages(image).call());\n    // return await contract.methods.dockerImages(image).call();\n}\n\nconst postJobOrService = async (thisObject) => {\n    const abi = returnAbi(\"run\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.run.consumer,\n        thisObject.state.run.imageName,\n        thisObject.state.run.inputFS,\n        thisObject.state.run.args\n    ]);\n    await runTrx(data,[\"Run\"],thisObject);\n}\n\nconst runJob = async (thisObject) => {\n    const abi = returnAbi(\"jobCallback\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.runJob.jobId,\n        thisObject.state.runJob.outputFS,\n        thisObject.state.runJob.dapps\n    ]);\n    await runTrx(data,[\"JobResult\",\"JobDone\"],thisObject);\n}\n\nconst runService = async (thisObject) => {\n    const abi = returnAbi(\"serviceCallback\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.runService.jobId,\n        thisObject.state.runService.port,\n        thisObject.state.runService.serviceDapps\n    ]);\n    await runTrx(data,[\"ServiceRunning\"],thisObject);\n}\n\nconst setDockerImage = async (thisObject) => {\n    const abi = returnAbi(\"setDockerImage\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.setDockerImage.imageName,\n        thisObject.state.setDockerImage.imageAddress,\n        thisObject.state.setDockerImage.imageHash,\n        thisObject.state.setDockerImage.imageType\n    ]);\n    await runTrx(data,[\"DockerSet\"],thisObject);\n}\n\nconst approveDockerImage = async (thisObject) => {\n    const abi = returnAbi(\"approveDockerForDSP\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.approveDocker.imageName\n    ]);\n    await runTrx(data,[\"DockerApprovalChanged\"],thisObject);\n}\n\nconst unapproveDockerImage = async (thisObject) => {\n    const abi = returnAbi(\"unapproveDockerForDSP\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.unapproveDockerForDSP.imageName\n    ]);\n    await runTrx(data,[\"DockerApprovalChanged\"],thisObject);\n}\n\nconst deprecateDSP = async (thisObject) => {\n    const abi = returnAbi(\"deprecateDSP\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, []);\n    await runTrx(data,[\"DSPStatusChanged\"],thisObject);\n}\n\nconst regDSP = async (thisObject) => {\n    const abi = returnAbi(\"regDSP\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.regDSP.endpoint\n    ]);\n    await runTrx(data,[\"DSPStatusChanged\"],thisObject);\n}\n\nconst claimFor = async (thisObject) => {\n    const abi = returnAbi(\"claimFor\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.claimFor._consumer,\n        thisObject.state.claimFor._dsp\n    ]);\n    await runTrx(data,[\"ClaimedGas\"],thisObject);\n}\n\nconst sellGas = async (thisObject) => {\n    const abi = returnAbi(\"sellGas\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.sellGas._amountToSell,\n        thisObject.state.sellGas._dsp\n    ]);\n    await runTrx(data,[\"SoldGas\"],thisObject);\n}\n\nconst buyGasFor = async (thisObject) => {\n    const abi = returnAbi(\"buyGasFor\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.buyGasFor._amount,\n        thisObject.state.buyGasFor._consumer,\n        thisObject.state.buyGasFor._dsp\n    ]);\n    await runTrx(data,[\"BoughtGas\"],thisObject);\n}\n\nconst setConsumerCallback = async (thisObject) => {\n    const abi = returnAbi(\"setConsumerCallback\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.setConsumerCallback.enabled\n    ]);\n    await runTrx(data,[],thisObject);\n}\n\nconst setConsumerPermissions = async (thisObject) => {\n    const abi = returnAbi(\"setConsumerPermissions\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.setConsumerPermissions.owner\n    ]);\n    await runTrx(data,[],thisObject);\n}\n\nconst setQuorum = async (thisObject) => {\n    const abi = returnAbi(\"setQuorum\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.setQuorum.consumer,\n        thisObject.state.setQuorum.dsps\n    ]);\n    await runTrx(data,[],thisObject);\n}\n\nconst jobError = async (thisObject) => {\n    const abi = returnAbi(\"jobError\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, []);\n    await runTrx(data,[],thisObject);\n}\n\nconst serviceError = async (thisObject) => {\n    const abi = returnAbi(\"serviceError\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, []);\n    await runTrx(data,[],thisObject);\n}\n\nconst runTrx = async (data,events,thisObject) => {\n    const trxInfo = {\n        trxHash: null,\n        error: ''\n    };\n    const transactionParameters = {\n        nonce: '0x00',\n        gasPrice: '2000000000',\n        gasLimit: '21000',\n        to: contractAddress,\n        from: ethereum.selectedAddress,\n        value: '0x00',\n        data,\n        chainId: '0x3', // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n    };\n    if(events.length) {\n        for(const name of events) {\n            subscribeContractEvent(name,thisObject);\n        }\n    }\n    await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n    })\n    .then((result) => {\n        trxInfo.trxHash = result;\n    })\n    .catch((error) => {\n        trxInfo.error = error;\n    });\n    thisObject.setState({trxInfo});\n}\n\nexport default { \n    fetchJobs,\n    fetchServices,\n    fetchJobImage,\n    fetchIsImageApprovedForDSP,\n    fetchPortForDSP,\n    fetchEndpointForDSP,\n    fetchDspInfo,\n    fetchDspData,\n    fetchConsumerData,\n    fetchDockerImage,\n    postJobOrService,\n    runJob,\n    runService,\n    setDockerImage,\n    approveDockerImage,\n    unapproveDockerImage,\n    deprecateDSP,\n    regDSP,\n    claimFor,\n    sellGas,\n    buyGasFor,\n    setConsumerCallback,\n    setConsumerPermissions,\n    setQuorum,\n    jobError,\n    serviceError\n}"]},"metadata":{},"sourceType":"module"}