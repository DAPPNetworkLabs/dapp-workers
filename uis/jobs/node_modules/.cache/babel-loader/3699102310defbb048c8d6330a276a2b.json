{"ast":null,"code":"import Web3 from 'web3';\nimport NexusJSON from '../../abi/Nexus.json';\nconst jobs = [];\nconst services = [];\nconst provider = new Web3.providers.WebsocketProvider('ws://localhost:8545');\nconst web3 = new Web3(provider);\nconst contractAddress = \"0x94D387F50569200aDACFd903345D077ef6ABcE11\";\nconst contract = new web3.eth.Contract(NexusJSON.abi, contractAddress);\nconst ethereum = window.ethereum;\n\nconst returnAbi = func => {\n  return NexusJSON.abi.find(el => el.name == func && el.type == \"function\");\n};\n\nconst fetchContractEvent = async event => {\n  // await contract.events[event]({}, function(error, event){\n  //     console.log(event)\n  //     console.log(error)\n  //     return { event, error };\n  // });\n  // await contract.events[event]({}, { fromBlock: 0, toBlock: 'latest' }).on(\n  //     'data', function(event) {\n  //     console.log(event);\n  // }).on('error', console.error);\n  console.log(contract);\n  await contract[event]({}, {\n    fromBlock: 0,\n    toBlock: 'latest'\n  }).get((error, eventResult) => {\n    if (error) console.log('Error in myEvent event handler: ' + error);else console.log('myEvent: ' + JSON.stringify(eventResult.args));\n  });\n};\n\nconst fetchLastJob = async () => {\n  return await contract.methods.lastJobID().call();\n};\n\nconst fetchJobs = async thisObject => {\n  for (let i = 0; i < (await fetchLastJob()); i++) {\n    const job = await contract.methods.jobs(i).call();\n    jobs.push(job);\n  }\n\n  thisObject.setState({\n    jobs: JSON.stringify(jobs)\n  });\n};\n\nconst fetchDspInfo = async dsp => {\n  console.log(await contract.methods.registeredDSPs(dsp).call()); // return await contract.methods.registeredDSPs(dsp).call();\n};\n\nconst fetchServices = async thisObject => {\n  for (let i = 0; i < (await fetchLastJob()); i++) {\n    const job = await contract.methods.services(i).call();\n    services.push(job);\n  }\n\n  console.log(`services: ${services}`);\n  thisObject.setState({\n    services: JSON.stringify(services)\n  });\n};\n\nconst postJobOrService = async form => {\n  const abi = returnAbi(\"run\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.consumer, form.imageName, form.inputFS, form.args]);\n  const trxData = await runTrx(data, [\"Run\"]);\n};\n\nconst runJob = async form => {\n  const abi = returnAbi(\"jobCallback\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.jobId, form.outputFS, form.dapps]);\n  const trxData = await runTrx(data, [\"JobResult\", \"JobDone\"]);\n};\n\nconst runService = async form => {\n  const abi = returnAbi(\"serviceCallback\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.jobId, form.port, form.serviceDapps]);\n  const trxData = await runTrx(data, [\"ServiceRunning\"]);\n};\n\nconst setDockerImage = async form => {\n  const abi = returnAbi(\"setDockerImage\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.imageName, form.imageAddress, form.imageHash, form.imageType]);\n  const trxData = await runTrx(data, [\"DockerSet\"]);\n};\n\nconst approveDockerImage = async form => {\n  const abi = returnAbi(\"approveDockerForDSP\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.imageName]);\n  const trxData = await runTrx(data, [\"DockerApprovalChanged\"]);\n};\n/*\n     getDSPEndpoint\n    getPortForDSP\n    unapproveDockerForDSP\n    isImageApprovedForDSP\n    getDockerImage\n    deprecateDSP\n    regDSP\n    claimFor\n    sellGas\n    buyGasFor\n    setConsumerCallback\n    setConsumerPermissions\n    setQuorum\n    jobError\n    serviceError\n */\n\n\nconst runTrx = async (data, events) => {\n  const trxInfo = {\n    trxHash: null,\n    events: []\n  };\n  const transactionParameters = {\n    nonce: '0x00',\n    gasPrice: '2000000000',\n    gasLimit: '21000',\n    to: contractAddress,\n    from: ethereum.selectedAddress,\n    value: '0x00',\n    data,\n    chainId: '0x3' // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n\n  };\n  trxInfo.trxHash = await ethereum.request({\n    method: 'eth_sendTransaction',\n    params: [transactionParameters]\n  });\n\n  if (events.length) {\n    for (const name of events) {\n      const eventInfo = await fetchContractEvent(name);\n      console.log(eventInfo);\n      trxInfo.events.push({\n        name,\n        ...eventInfo\n      });\n    }\n  }\n\n  console.log(trxInfo);\n  return trxInfo;\n};\n\nexport default {\n  fetchJobs,\n  fetchServices,\n  fetchDspInfo,\n  postJobOrService,\n  runJob,\n  runService,\n  setDockerImage,\n  approveDockerImage\n};","map":{"version":3,"sources":["/Users/natanaelprudhomme/Workspaces/dapp-workers/uis/jobs/src/lib/web3/index.js"],"names":["Web3","NexusJSON","jobs","services","provider","providers","WebsocketProvider","web3","contractAddress","contract","eth","Contract","abi","ethereum","window","returnAbi","func","find","el","name","type","fetchContractEvent","event","console","log","fromBlock","toBlock","get","error","eventResult","JSON","stringify","args","fetchLastJob","methods","lastJobID","call","fetchJobs","thisObject","i","job","push","setState","fetchDspInfo","dsp","registeredDSPs","fetchServices","postJobOrService","form","data","encodeFunctionCall","consumer","imageName","inputFS","trxData","runTrx","runJob","jobId","outputFS","dapps","runService","port","serviceDapps","setDockerImage","imageAddress","imageHash","imageType","approveDockerImage","events","trxInfo","trxHash","transactionParameters","nonce","gasPrice","gasLimit","to","from","selectedAddress","value","chainId","request","method","params","length","eventInfo"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\nimport NexusJSON from '../../abi/Nexus.json';\n\nconst jobs = [];\nconst services = [];\nconst provider = new Web3.providers.WebsocketProvider('ws://localhost:8545');\nconst web3 = new Web3(provider);\nconst contractAddress = \"0x94D387F50569200aDACFd903345D077ef6ABcE11\";\nconst contract = new web3.eth.Contract(NexusJSON.abi,contractAddress);\nconst ethereum = window.ethereum;\n\nconst returnAbi = (func) => {\n    return NexusJSON.abi.find(el => el.name == func && el.type == \"function\");\n}\n\nconst fetchContractEvent = async (event) => {\n    // await contract.events[event]({}, function(error, event){\n    //     console.log(event)\n    //     console.log(error)\n    //     return { event, error };\n    // });\n    // await contract.events[event]({}, { fromBlock: 0, toBlock: 'latest' }).on(\n    //     'data', function(event) {\n    //     console.log(event);\n    // }).on('error', console.error);\n    console.log(contract)\n    await contract[event]({}, { fromBlock: 0, toBlock: 'latest' }).get((error, eventResult) => {\n        if (error)\n          console.log('Error in myEvent event handler: ' + error);\n        else\n          console.log('myEvent: ' + JSON.stringify(eventResult.args));\n    });\n}\n\nconst fetchLastJob = async () => {\n    return await contract.methods.lastJobID().call();\n}\n\nconst fetchJobs = async (thisObject) => {\n    for(let i=0; i < await fetchLastJob(); i++) {\n        const job = await contract.methods.jobs(i).call();\n        jobs.push(job);\n    }\n    thisObject.setState({jobs: JSON.stringify(jobs)});\n}\n\nconst fetchDspInfo = async (dsp) => {\n    console.log(await contract.methods.registeredDSPs(dsp).call());\n    // return await contract.methods.registeredDSPs(dsp).call();\n}\n\nconst fetchServices = async (thisObject) => {\n    for(let i=0; i < await fetchLastJob(); i++) {\n        const job = await contract.methods.services(i).call();\n        services.push(job);\n    }\n    console.log(`services: ${services}`);\n    thisObject.setState({services: JSON.stringify(services)});\n}\n\nconst postJobOrService = async (form) => {\n    const abi = returnAbi(\"run\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.consumer,\n        form.imageName,\n        form.inputFS,\n        form.args\n    ]);\n\n    const trxData = await runTrx(data,[\"Run\"]);\n}\n\nconst runJob = async (form) => {\n    const abi = returnAbi(\"jobCallback\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.jobId,\n        form.outputFS,\n        form.dapps\n    ]);\n\n    const trxData = await runTrx(data,[\"JobResult\",\"JobDone\"]);\n}\n\nconst runService = async (form) => {\n    const abi = returnAbi(\"serviceCallback\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.jobId,\n        form.port,\n        form.serviceDapps\n    ]);\n\n    const trxData = await runTrx(data,[\"ServiceRunning\"]);\n}\n\nconst setDockerImage = async (form) => {\n    const abi = returnAbi(\"setDockerImage\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.imageName,\n        form.imageAddress,\n        form.imageHash,\n        form.imageType\n    ]);\n\n    const trxData = await runTrx(data,[\"DockerSet\"]);\n}\n\nconst approveDockerImage = async (form) => {\n    const abi = returnAbi(\"approveDockerForDSP\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.imageName\n    ]);\n\n    const trxData = await runTrx(data,[\"DockerApprovalChanged\"]);\n}\n\n    /*\n\n        getDSPEndpoint\n        getPortForDSP\n        unapproveDockerForDSP\n        isImageApprovedForDSP\n        getDockerImage\n        deprecateDSP\n        regDSP\n        claimFor\n        sellGas\n        buyGasFor\n        setConsumerCallback\n        setConsumerPermissions\n        setQuorum\n        jobError\n        serviceError\n\n    */\n\nconst runTrx = async (data,events) => {\n    const trxInfo = {\n        trxHash: null,\n        events: []\n    };\n    const transactionParameters = {\n        nonce: '0x00',\n        gasPrice: '2000000000',\n        gasLimit: '21000',\n        to: contractAddress,\n        from: ethereum.selectedAddress,\n        value: '0x00',\n        data,\n        chainId: '0x3', // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n    };\n    trxInfo.trxHash = await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n    });\n    if(events.length) {\n        for(const name of events) {\n            const eventInfo = await fetchContractEvent(name);\n            console.log(eventInfo);\n            trxInfo.events.push({name, ...eventInfo});\n        }\n    }\n    console.log(trxInfo);\n    return trxInfo;\n}\n\nexport default { \n    fetchJobs,\n    fetchServices,\n    fetchDspInfo,\n    postJobOrService,\n    runJob,\n    runService,\n    setDockerImage,\n    approveDockerImage\n}"]},"metadata":{},"sourceType":"module"}