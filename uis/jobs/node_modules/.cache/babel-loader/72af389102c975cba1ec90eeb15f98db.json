{"ast":null,"code":"import Web3 from 'web3';\nimport NexusJSON from '../../abi/Nexus.json';\nconst jobs = [];\nconst web3 = new Web3('http://localhost:8545');\nconst contractAddress = \"0x94D387F50569200aDACFd903345D077ef6ABcE11\";\nconst contract = new web3.eth.Contract(NexusJSON.abi, contractAddress);\nconst ethereum = window.ethereum;\n\nconst fetchJobs = async thisObject => {\n  console.log(contract);\n  const lastJob = await contract.methods.lastJobID().call();\n  console.log(`lastJob: ${lastJob}`);\n\n  for (let i = 0; i < lastJob; i++) {\n    const job = await contract.methods.jobs(i).call();\n    jobs.push(job);\n  }\n\n  console.log(`jobs: ${jobs}`);\n  thisObject.setState({\n    jobs: JSON.stringify(jobs)\n  });\n};\n\nconst runJob = async form => {\n  const abi = NexusJSON.abi.find(el => el.name == \"run\" && el.type == \"function\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [...form]);\n  const transactionParameters = {\n    nonce: '0x00',\n    gasPrice: '0x09184e72a000',\n    gasLimit: '0x01406F40',\n    gas: '0x2710',\n    to: contractAddress,\n    from: ethereum.selectedAddress,\n    value: '0x00',\n    data,\n    chainId: '0x3' // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n\n  }; // txHash is a hex string\n  // As with any RPC call, it may throw an error\n  // const txHash = await ethereum.request({\n  //     method: 'eth_sendTransaction',\n  //     params: [transactionParameters],\n  // });\n  // await contract.events.Run({}, function(error, event){\n  //     console.log(error);\n  //     console.log(event); \n  // });\n};\n\nexport default {\n  fetchJobs,\n  runJob\n};","map":{"version":3,"sources":["/Users/natanaelprudhomme/Workspaces/dapp-workers/uis/jobs/src/lib/web3/index.js"],"names":["Web3","NexusJSON","jobs","web3","contractAddress","contract","eth","Contract","abi","ethereum","window","fetchJobs","thisObject","console","log","lastJob","methods","lastJobID","call","i","job","push","setState","JSON","stringify","runJob","form","find","el","name","type","data","encodeFunctionCall","transactionParameters","nonce","gasPrice","gasLimit","gas","to","from","selectedAddress","value","chainId"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AAEA,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,IAAI,GAAG,IAAIH,IAAJ,CAAS,uBAAT,CAAb;AACA,MAAMI,eAAe,GAAG,4CAAxB;AACA,MAAMC,QAAQ,GAAG,IAAIF,IAAI,CAACG,GAAL,CAASC,QAAb,CAAsBN,SAAS,CAACO,GAAhC,EAAoCJ,eAApC,CAAjB;AACA,MAAMK,QAAQ,GAAGC,MAAM,CAACD,QAAxB;;AAEA,MAAME,SAAS,GAAG,MAAOC,UAAP,IAAsB;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACA,QAAMU,OAAO,GAAG,MAAMV,QAAQ,CAACW,OAAT,CAAiBC,SAAjB,GAA6BC,IAA7B,EAAtB;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAa,YAAWC,OAAQ,EAAhC;;AACA,OAAI,IAAII,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGJ,OAAjB,EAA0BI,CAAC,EAA3B,EAA+B;AAC3B,UAAMC,GAAG,GAAG,MAAMf,QAAQ,CAACW,OAAT,CAAiBd,IAAjB,CAAsBiB,CAAtB,EAAyBD,IAAzB,EAAlB;AACAhB,IAAAA,IAAI,CAACmB,IAAL,CAAUD,GAAV;AACH;;AACDP,EAAAA,OAAO,CAACC,GAAR,CAAa,SAAQZ,IAAK,EAA1B;AACAU,EAAAA,UAAU,CAACU,QAAX,CAAoB;AAACpB,IAAAA,IAAI,EAAEqB,IAAI,CAACC,SAAL,CAAetB,IAAf;AAAP,GAApB;AACH,CAVD;;AAYA,MAAMuB,MAAM,GAAG,MAAOC,IAAP,IAAgB;AAC3B,QAAMlB,GAAG,GAAGP,SAAS,CAACO,GAAV,CAAcmB,IAAd,CAAmBC,EAAE,IAAIA,EAAE,CAACC,IAAH,IAAW,KAAX,IAAoBD,EAAE,CAACE,IAAH,IAAW,UAAxD,CAAZ;AACA,QAAMC,IAAI,GAAG5B,IAAI,CAACG,GAAL,CAASE,GAAT,CAAawB,kBAAb,CAAgCxB,GAAhC,EAAqC,CAAC,GAAGkB,IAAJ,CAArC,CAAb;AACA,QAAMO,qBAAqB,GAAG;AAC1BC,IAAAA,KAAK,EAAE,MADmB;AAE1BC,IAAAA,QAAQ,EAAE,gBAFgB;AAG1BC,IAAAA,QAAQ,EAAE,YAHgB;AAI1BC,IAAAA,GAAG,EAAE,QAJqB;AAK1BC,IAAAA,EAAE,EAAElC,eALsB;AAM1BmC,IAAAA,IAAI,EAAE9B,QAAQ,CAAC+B,eANW;AAO1BC,IAAAA,KAAK,EAAE,MAPmB;AAQ1BV,IAAAA,IAR0B;AAS1BW,IAAAA,OAAO,EAAE,KATiB,CASV;;AATU,GAA9B,CAH2B,CAe3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAzBD;;AA2BA,eAAe;AACX/B,EAAAA,SADW;AAEXc,EAAAA;AAFW,CAAf","sourcesContent":["import Web3 from 'web3';\nimport NexusJSON from '../../abi/Nexus.json';\n\nconst jobs = [];\nconst web3 = new Web3('http://localhost:8545');\nconst contractAddress = \"0x94D387F50569200aDACFd903345D077ef6ABcE11\";\nconst contract = new web3.eth.Contract(NexusJSON.abi,contractAddress);\nconst ethereum = window.ethereum;\n\nconst fetchJobs = async (thisObject) => {\n    console.log(contract);\n    const lastJob = await contract.methods.lastJobID().call();\n    console.log(`lastJob: ${lastJob}`);\n    for(let i=0; i < lastJob; i++) {\n        const job = await contract.methods.jobs(i).call();\n        jobs.push(job);\n    }\n    console.log(`jobs: ${jobs}`);\n    thisObject.setState({jobs: JSON.stringify(jobs)});\n}\n\nconst runJob = async (form) => {\n    const abi = NexusJSON.abi.find(el => el.name == \"run\" && el.type == \"function\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [...form]);\n    const transactionParameters = {\n        nonce: '0x00',\n        gasPrice: '0x09184e72a000',\n        gasLimit: '0x01406F40',\n        gas: '0x2710',\n        to: contractAddress,\n        from: ethereum.selectedAddress,\n        value: '0x00',\n        data,\n        chainId: '0x3', // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n    };\n\n    // txHash is a hex string\n    // As with any RPC call, it may throw an error\n    // const txHash = await ethereum.request({\n    //     method: 'eth_sendTransaction',\n    //     params: [transactionParameters],\n    // });\n    // await contract.events.Run({}, function(error, event){\n    //     console.log(error);\n    //     console.log(event); \n    // });\n}\n\nexport default { \n    fetchJobs,\n    runJob\n}"]},"metadata":{},"sourceType":"module"}