{"ast":null,"code":"var _jsxFileName = \"/Users/natanaelprudhomme/Workspaces/dapp-workers/uis/jobs/src/containers/Home/Home.jsx\";\nimport React, { Component } from 'react';\nimport classes from './Home.module.scss';\nimport Header from '../../components/Header/Header';\nimport Jobs from '../../components/Home/Jobs/Jobs';\nimport Services from '../../components/Home/Services/Services';\nimport PostJobOrService from '../../components/Home/PostJobOrService/PostJobOrService';\nimport RunJob from '../../components/Home/RunJob/RunJob';\nimport RunService from '../../components/Home/RunService/RunService';\nimport SetDockerImage from '../../components/Home/SetDockerImage/SetDockerImage';\nimport ApproveDocker from '../../components/Home/ApproveDocker/ApproveDocker';\nimport DspInfo from '../../components/Home/DspInfo/DspInfo';\nimport Form from '../../components/UI/Form/Form';\nimport Footer from '../../components/Footer/Footer';\nimport lib from '../../lib/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ethereum = window.ethereum;\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.forms = [{\n      onClick: () => lib.web3.postJobOrService(this),\n      onChange: this.handleChange,\n      buttonText: \"Post Job or Service\",\n      event: \"run\",\n      inputs: [{\n        name: \"consumer\",\n        placeholder: \"address consumer\"\n      }, {\n        name: \"imageName\",\n        placeholder: \"string imageName\"\n      }, {\n        name: \"inputFS\",\n        placeholder: \"string inputFS\"\n      }, {\n        name: \"args\",\n        placeholder: \"string[] args\"\n      }]\n    }, {\n      onClick: () => lib.web3.runJob(this),\n      onChange: this.handleChange,\n      buttonText: \"Run Job\",\n      event: \"runJob\",\n      inputs: [{\n        name: \"jobID\",\n        placeholder: \"uint256 jobID\"\n      }, {\n        name: \"outputFS\",\n        placeholder: \"string outputFS\"\n      }, {\n        name: \"dapps\",\n        placeholder: \"uint256 dapps\"\n      }]\n    }, {\n      onClick: () => lib.web3.runService(this),\n      onChange: this.handleChange,\n      buttonText: \"Run Service\",\n      event: \"runService\",\n      inputs: [{\n        name: \"jobId\",\n        placeholder: \"uint256 jobId\"\n      }, {\n        name: \"port\",\n        placeholder: \"uint256 port\"\n      }, {\n        name: \"dapps\",\n        placeholder: \"uint256 dapps\"\n      }]\n    }, {\n      onClick: () => lib.web3.setDockerImage(this),\n      onChange: this.handleChange,\n      buttonText: \"Set Docker Image\",\n      event: \"setDockerImage\",\n      inputs: [{\n        name: \"imageName\",\n        placeholder: \"string imageName\"\n      }, {\n        name: \"imageAddress\",\n        placeholder: \"string imageAddress\"\n      }, {\n        name: \"imageHash\",\n        placeholder: \"string imageHash\"\n      }, {\n        name: \"imageType\",\n        placeholder: \"string imageType\"\n      }]\n    }, {\n      onClick: () => lib.web3.approveDockerImage(this),\n      onChange: this.handleChange,\n      buttonText: \"Approve Docker Image\",\n      event: \"approveDocker\",\n      inputs: [{\n        name: \"imageName\",\n        placeholder: \"string imageName\"\n      }]\n    }, {\n      onClick: () => lib.web3.fetchDspInfo(this.state.registeredDSPs.dsp),\n      onChange: this.handleChange,\n      buttonText: \"Fetch DSP Info\",\n      event: \"registeredDSPs\",\n      inputs: [{\n        name: \"dsp\",\n        placeholder: \"address dsp\"\n      }]\n    }];\n    this.state = {\n      account: null,\n      chainId: null,\n      jobs: [],\n      services: [],\n      connectInfo: null,\n      disconnectInfo: null,\n      trxInfo: null,\n      events: [],\n      image: null,\n      port: null,\n      endpoint: null,\n      approvedImage: null,\n      run: {\n        consumer: '0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f',\n        imageName: 'rust-compiler',\n        inputFS: 'QmUm1JD5os8p6zu6gQBPr7Rov2VD6QzMeRBH5j4ojFBzi6',\n        args: []\n      },\n      runJob: {\n        jobId: 5,\n        outputFS: '',\n        dapps: 804000\n      },\n      runService: {\n        jobId: 5,\n        port: 8080,\n        dapps: 804000\n      },\n      setDockerImage: {\n        imageName: '',\n        imageAddress: '',\n        imageHash: '',\n        imageType: ''\n      },\n      approveDocker: {\n        imageName: ''\n      },\n      registeredDSPs: {\n        dsp: '0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f'\n      },\n      getDockerImage: {\n        imageName: ''\n      },\n      isImageApprovedForDSP: {\n        imageName: ''\n      },\n      getPortForDSP: {\n        jobID: '',\n        dsp: ''\n      },\n      getDSPEndpoint: {\n        dsp: ''\n      },\n      unapproveDockerForDSP: {\n        imageName: ''\n      },\n      regDSP: {\n        endpoint: ''\n      },\n      claimFor: {\n        _consumer: '',\n        _dsp: ''\n      },\n      sellGas: {\n        _amountToSell: '',\n        _dsp: ''\n      },\n      buyGasFor: {\n        _amount: '',\n        _consumer: '',\n        _dsp: ''\n      },\n      setConsumerCallback: {\n        enabled: null\n      },\n      setConsumerPermissions: {\n        owner: ''\n      },\n      setQuorum: {\n        consumer: '',\n        dsps: []\n      },\n      jobError: {\n        jobID: '',\n        stdErr: '',\n        outputFS: ''\n      },\n      serviceError: {\n        jobID: '',\n        stdErr: '',\n        outputFS: ''\n      }\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const accounts = ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    lib.web3.fetchJobs(this);\n    lib.web3.fetchServices(this);\n    lib.metamask.runHandlers(this);\n    this.setState({\n      account: accounts[0]\n    });\n  }\n\n  componentWillUnmount() {\n    lib.metamask.rmHandlers();\n  }\n\n  handleChange(event, func) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [func]: { ...this.state[func],\n        [name]: value,\n        error: ''\n      }\n    });\n  }\n\n  render() {\n    const forms = this.forms.map(el => {\n      return /*#__PURE__*/_jsxDEV(Form, {\n        onClick: el.onClick,\n        onChange: el.onChange,\n        buttonText: el.buttonText,\n        event: el.event,\n        inputs: el.inputs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        login: () => lib.metamask.login(this),\n        logout: () => lib.metamask.logout(this),\n        account: this.state.account\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this), forms, /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/natanaelprudhomme/Workspaces/dapp-workers/uis/jobs/src/containers/Home/Home.jsx"],"names":["React","Component","classes","Header","Jobs","Services","PostJobOrService","RunJob","RunService","SetDockerImage","ApproveDocker","DspInfo","Form","Footer","lib","ethereum","window","Home","constructor","props","forms","onClick","web3","postJobOrService","onChange","handleChange","buttonText","event","inputs","name","placeholder","runJob","runService","setDockerImage","approveDockerImage","fetchDspInfo","state","registeredDSPs","dsp","account","chainId","jobs","services","connectInfo","disconnectInfo","trxInfo","events","image","port","endpoint","approvedImage","run","consumer","imageName","inputFS","args","jobId","outputFS","dapps","imageAddress","imageHash","imageType","approveDocker","getDockerImage","isImageApprovedForDSP","getPortForDSP","jobID","getDSPEndpoint","unapproveDockerForDSP","regDSP","claimFor","_consumer","_dsp","sellGas","_amountToSell","buyGasFor","_amount","setConsumerCallback","enabled","setConsumerPermissions","owner","setQuorum","dsps","jobError","stdErr","serviceError","bind","componentDidMount","accounts","request","method","fetchJobs","fetchServices","metamask","runHandlers","setState","componentWillUnmount","rmHandlers","func","value","target","error","render","map","el","login","logout"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport classes from './Home.module.scss';\nimport Header from '../../components/Header/Header';\nimport Jobs from '../../components/Home/Jobs/Jobs';\nimport Services from '../../components/Home/Services/Services';\nimport PostJobOrService from '../../components/Home/PostJobOrService/PostJobOrService';\nimport RunJob from '../../components/Home/RunJob/RunJob';\nimport RunService from '../../components/Home/RunService/RunService';\nimport SetDockerImage from '../../components/Home/SetDockerImage/SetDockerImage';\nimport ApproveDocker from '../../components/Home/ApproveDocker/ApproveDocker';\nimport DspInfo from '../../components/Home/DspInfo/DspInfo';\nimport Form from '../../components/UI/Form/Form';\nimport Footer from '../../components/Footer/Footer';\nimport lib from '../../lib/index';\n\nconst ethereum = window.ethereum;\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            account: null,\n            chainId: null,\n            jobs: [],\n            services: [],\n            connectInfo: null,\n            disconnectInfo: null,\n            trxInfo: null,\n            events: [],\n            image:null,\n            port:null,\n            endpoint:null,\n            approvedImage:null,\n            run: {\n                consumer: '0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f',\n                imageName: 'rust-compiler',\n                inputFS: 'QmUm1JD5os8p6zu6gQBPr7Rov2VD6QzMeRBH5j4ojFBzi6',\n                args: []\n            },\n            runJob: {\n                jobId: 5,\n                outputFS: '',\n                dapps: 804000\n            },\n            runService: {\n                jobId: 5,\n                port: 8080,\n                dapps: 804000\n            },\n            setDockerImage: {\n                imageName: '',\n                imageAddress: '',\n                imageHash: '',\n                imageType: ''\n            },\n            approveDocker: {\n                imageName: ''\n            },\n            registeredDSPs: {\n                dsp:'0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f'\n            },\n            getDockerImage: {\n                imageName:''\n            },\n            isImageApprovedForDSP: {\n                imageName:''\n            },\n            getPortForDSP: {\n                jobID:'',\n                dsp:''\n            },\n            getDSPEndpoint: {\n                dsp:''\n            },\n            unapproveDockerForDSP: {\n                imageName:''\n            },\n            regDSP: {\n                endpoint:''\n            },\n            claimFor: {\n                _consumer:'',\n                _dsp:''\n            },\n            sellGas: {\n                _amountToSell:'',\n                _dsp:''\n            },\n            buyGasFor: {\n                _amount:'',\n                _consumer:'',\n                _dsp:''\n            },\n            setConsumerCallback: {\n                enabled:null\n            },\n            setConsumerPermissions: {\n                owner:''\n            },\n            setQuorum: {\n                consumer:'',\n                dsps:[]\n            },\n            jobError: {\n                jobID:'',\n                stdErr:'',\n                outputFS:''\n            },\n            serviceError: {\n                jobID:'',\n                stdErr:'',\n                outputFS:''\n            }\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        const accounts = ethereum.request({ method: 'eth_requestAccounts' });\n        lib.web3.fetchJobs(this);\n        lib.web3.fetchServices(this);\n        lib.metamask.runHandlers(this);\n        this.setState({ account: accounts[0] });\n    }\n\n    componentWillUnmount() {\n        lib.metamask.rmHandlers();\n    }\n\n    handleChange(event, func) {\n        const { name, value } = event.target;\n        this.setState({\n            [func]: {\n                ...this.state[func],\n                [name]: value,\n                error: '',\n            },\n        });\n    }\n\n    forms = [\n        {\n            onClick:()=>lib.web3.postJobOrService(this),\n            onChange:this.handleChange,\n            buttonText:\"Post Job or Service\",\n            event:\"run\",\n            inputs:[\n                { name:\"consumer\",placeholder: \"address consumer\"},\n                { name:\"imageName\",placeholder: \"string imageName\"},\n                { name:\"inputFS\",placeholder: \"string inputFS\"},\n                { name:\"args\",placeholder: \"string[] args\"}\n            ]\n        },\n        {\n            onClick:()=>lib.web3.runJob(this),\n            onChange:this.handleChange,\n            buttonText:\"Run Job\",\n            event:\"runJob\",\n            inputs:[\n                { name:\"jobID\",placeholder: \"uint256 jobID\"},\n                { name:\"outputFS\",placeholder: \"string outputFS\"},\n                { name:\"dapps\",placeholder: \"uint256 dapps\"},\n            ]\n        },\n        {\n            onClick:()=>lib.web3.runService(this),\n            onChange:this.handleChange,\n            buttonText:\"Run Service\",\n            event:\"runService\",\n            inputs:[\n                { name:\"jobId\",placeholder: \"uint256 jobId\"},\n                { name:\"port\",placeholder: \"uint256 port\"},\n                { name:\"dapps\",placeholder: \"uint256 dapps\"},\n            ]\n        },\n        {\n            onClick:()=>lib.web3.setDockerImage(this),\n            onChange:this.handleChange,\n            buttonText:\"Set Docker Image\",\n            event:\"setDockerImage\",\n            inputs:[\n                { name:\"imageName\",placeholder: \"string imageName\"},\n                { name:\"imageAddress\",placeholder: \"string imageAddress\"},\n                { name:\"imageHash\",placeholder: \"string imageHash\"},\n                { name:\"imageType\",placeholder: \"string imageType\"},\n            ]\n        },\n        {\n            onClick:()=>lib.web3.approveDockerImage(this),\n            onChange:this.handleChange,\n            buttonText:\"Approve Docker Image\",\n            event:\"approveDocker\",\n            inputs:[\n                { name:\"imageName\",placeholder: \"string imageName\"},\n            ]\n        },\n        {\n            onClick:()=>lib.web3.fetchDspInfo(this.state.registeredDSPs.dsp),\n            onChange:this.handleChange,\n            buttonText:\"Fetch DSP Info\",\n            event:\"registeredDSPs\",\n            inputs:[\n                { name:\"dsp\",placeholder: \"address dsp\"},\n            ]\n        }\n    ]\n  \n    render() {\n        const forms = this.forms.map(el => {\n            return (\n                <Form\n                    onClick={el.onClick}\n                    onChange={el.onChange}\n                    buttonText={el.buttonText}\n                    event={el.event}\n                    inputs={el.inputs}\n                />\n            )\n        })\n        return (\n            <div>\n                <Header\n                    login={()=>lib.metamask.login(this)}\n                    logout={()=>lib.metamask.logout(this)}\n                    account={this.state.account}\n                />\n                {/* <Jobs\n                    jobs={this.state.jobs}\n                />\n                <Services\n                    services={this.state.services}\n                /> */}\n                {forms}\n                {/* \n                    dspData\n                    consumerData\n                    dockerImages\n                    getDSPEndpoint\n                    getPortForDSP\n                    unapproveDockerForDSP\n                    isImageApprovedForDSP\n                    getDockerImage\n                    deprecateDSP\n                    regDSP\n                    claimFor\n                    sellGas\n                    buyGasFor\n                    setConsumerCallback\n                    setConsumerPermissions\n                    setQuorum\n                    jobError\n                    serviceError \n                */}\n                <Footer/>\n            </div>\n        );\n    }\n  }\n  \n  export default Home;\n  "]},"metadata":{},"sourceType":"module"}