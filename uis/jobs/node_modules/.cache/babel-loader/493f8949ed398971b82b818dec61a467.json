{"ast":null,"code":"var _jsxFileName = \"/Users/natanaelprudhomme/Workspaces/dapp-workers/uis/jobs/src/containers/Home/Home.jsx\";\nimport React, { Component } from 'react';\nimport classes from './Home.module.scss';\nimport Header from '../../components/Header/Header';\nimport Jobs from '../../components/Home/Jobs/Jobs';\nimport Services from '../../components/Home/Services/Services';\nimport PostJobOrService from '../../components/Home/PostJobOrService/PostJobOrService';\nimport RunJob from '../../components/Home/RunJob/RunJob';\nimport RunService from '../../components/Home/RunService/RunService';\nimport SetDockerImage from '../../components/Home/SetDockerImage/SetDockerImage';\nimport ApproveDocker from '../../components/Home/ApproveDocker/ApproveDocker';\nimport DspInfo from '../../components/Home/DspInfo/DspInfo';\nimport Footer from '../../components/Footer/Footer';\nimport lib from '../../lib/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ethereum = window.ethereum;\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: null,\n      chainId: null,\n      jobs: [],\n      services: [],\n      run: {\n        consumer: '0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f',\n        imageName: 'rust-compiler',\n        inputFS: 'QmUm1JD5os8p6zu6gQBPr7Rov2VD6QzMeRBH5j4ojFBzi6',\n        args: []\n      },\n      runJob: {\n        jobId: 5,\n        outputFS: '',\n        dapps: 804000\n      },\n      runService: {\n        jobId: 5,\n        port: 8080,\n        dapps: 804000\n      },\n      setDockerImage: {\n        imageName: '',\n        imageAddress: '',\n        imageHash: '',\n        imageType: ''\n      },\n      approveDocker: {\n        imageName: ''\n      },\n      registeredDSPs: {\n        dsp: '0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f'\n      }\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const accounts = ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    lib.web3.fetchJobs(this);\n    lib.web3.fetchServices(this);\n    lib.metamask.runHandlers(this);\n    this.setState({\n      account: accounts[0]\n    });\n  }\n\n  componentWillUnmount() {// clear metamask listeners\n  }\n\n  handleChange(event, func) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [func]: { ...this.state[func],\n        [name]: value,\n        error: ''\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        login: () => lib.metamask.login(this),\n        logout: () => lib.metamask.logout(this),\n        account: this.state.account\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Jobs, {\n        jobs: this.state.jobs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Services, {\n        services: this.state.services\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PostJobOrService, {\n        postJobOrService: () => lib.web3.postJobOrService(this.state.run),\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RunJob, {\n        runJob: () => lib.web3.runJob(this.state.runJob),\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RunService, {\n        runService: () => lib.web3.runService(this.state.runService),\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SetDockerImage, {\n        setDockerImage: () => lib.web3.setDockerImage(this.state.setDockerImage),\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ApproveDocker, {\n        approveDocker: () => lib.web3.approveDockerImage(this.state.approveDocker),\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DspInfo, {\n        fetchDspInfo: () => lib.web3.fetchDspInfo(this.state.registeredDSPs.dsp),\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/natanaelprudhomme/Workspaces/dapp-workers/uis/jobs/src/containers/Home/Home.jsx"],"names":["React","Component","classes","Header","Jobs","Services","PostJobOrService","RunJob","RunService","SetDockerImage","ApproveDocker","DspInfo","Footer","lib","ethereum","window","Home","constructor","props","state","account","chainId","jobs","services","run","consumer","imageName","inputFS","args","runJob","jobId","outputFS","dapps","runService","port","setDockerImage","imageAddress","imageHash","imageType","approveDocker","registeredDSPs","dsp","handleChange","bind","componentDidMount","accounts","request","method","web3","fetchJobs","fetchServices","metamask","runHandlers","setState","componentWillUnmount","event","func","name","value","target","error","render","login","logout","postJobOrService","approveDockerImage","fetchDspInfo"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport classes from './Home.module.scss';\nimport Header from '../../components/Header/Header';\nimport Jobs from '../../components/Home/Jobs/Jobs';\nimport Services from '../../components/Home/Services/Services';\nimport PostJobOrService from '../../components/Home/PostJobOrService/PostJobOrService';\nimport RunJob from '../../components/Home/RunJob/RunJob';\nimport RunService from '../../components/Home/RunService/RunService';\nimport SetDockerImage from '../../components/Home/SetDockerImage/SetDockerImage';\nimport ApproveDocker from '../../components/Home/ApproveDocker/ApproveDocker';\nimport DspInfo from '../../components/Home/DspInfo/DspInfo';\nimport Footer from '../../components/Footer/Footer';\nimport lib from '../../lib/index';\n\nconst ethereum = window.ethereum;\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            account: null,\n            chainId: null,\n            jobs: [],\n            services: [],\n            run: {\n                consumer: '0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f',\n                imageName: 'rust-compiler',\n                inputFS: 'QmUm1JD5os8p6zu6gQBPr7Rov2VD6QzMeRBH5j4ojFBzi6',\n                args: []\n            },\n            runJob: {\n                jobId: 5,\n                outputFS: '',\n                dapps: 804000\n            },\n            runService: {\n                jobId: 5,\n                port: 8080,\n                dapps: 804000\n            },\n            setDockerImage: {\n                imageName: '',\n                imageAddress: '',\n                imageHash: '',\n                imageType: ''\n            },\n            approveDocker: {\n                imageName: ''\n            },\n            registeredDSPs: {\n                dsp:'0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f'\n            }\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        const accounts = ethereum.request({ method: 'eth_requestAccounts' });\n        lib.web3.fetchJobs(this);\n        lib.web3.fetchServices(this);\n        lib.metamask.runHandlers(this);\n        this.setState({ account: accounts[0] });\n    }\n\n    componentWillUnmount() {\n        // clear metamask listeners\n    }\n\n    handleChange(event, func) {\n        const { name, value } = event.target;\n        this.setState({\n            [func]: {\n                ...this.state[func],\n                [name]: value,\n                error: '',\n            },\n        });\n    }\n  \n    render() {\n        return (\n            <div>\n                <Header\n                    login={()=>lib.metamask.login(this)}\n                    logout={()=>lib.metamask.logout(this)}\n                    account={this.state.account}\n                />\n                <Jobs\n                    jobs={this.state.jobs}\n                />\n                <Services\n                    services={this.state.services}\n                />\n                <PostJobOrService\n                    postJobOrService={()=>lib.web3.postJobOrService(this.state.run)}\n                    onChange={this.handleChange}\n                />\n                <RunJob\n                    runJob={()=>lib.web3.runJob(this.state.runJob)}\n                    onChange={this.handleChange}\n                />\n                <RunService\n                    runService={()=>lib.web3.runService(this.state.runService)}\n                    onChange={this.handleChange}\n                />\n                <SetDockerImage\n                    setDockerImage={()=>lib.web3.setDockerImage(this.state.setDockerImage)}\n                    onChange={this.handleChange}\n                />\n                <ApproveDocker\n                    approveDocker={()=>lib.web3.approveDockerImage(this.state.approveDocker)}\n                    onChange={this.handleChange}\n                />\n                <DspInfo\n                    fetchDspInfo={()=>lib.web3.fetchDspInfo(this.state.registeredDSPs.dsp)}\n                    onChange={this.handleChange}\n                />\n                <Footer/>\n            </div>\n        );\n    }\n  }\n  \n  export default Home;\n  "]},"metadata":{},"sourceType":"module"}