{"ast":null,"code":"import Web3 from 'web3';\nimport NexusJSON from '../../abi/Nexus.json';\nconst jobs = [];\nconst services = [];\nconst provider = new Web3.providers.WebsocketProvider('ws://localhost:8545');\nconst web3 = new Web3(provider);\nconst contractAddress = \"0x94D387F50569200aDACFd903345D077ef6ABcE11\";\nconst contract = new web3.eth.Contract(NexusJSON.abi, contractAddress);\nconst ethereum = window.ethereum;\n\nconst returnAbi = func => {\n  return NexusJSON.abi.find(el => el.name == func && el.type == \"function\");\n};\n\nconst fetchContractEvent = async event => {\n  console.log(`before`);\n  await contract.events[event]({}, function (error, event) {\n    console.log(error);\n    console.log(event);\n  });\n  console.log(`after`);\n};\n\nconst fetchLastJob = async () => {\n  return await contract.methods.lastJobID().call();\n};\n\nconst fetchJobs = async thisObject => {\n  for (let i = 0; i < (await fetchLastJob()); i++) {\n    const job = await contract.methods.jobs(i).call();\n    jobs.push(job);\n  }\n\n  thisObject.setState({\n    jobs: JSON.stringify(jobs)\n  });\n};\n\nconst fetchDspInfo = async dsp => {\n  console.log(await contract.methods.registeredDSPs(dsp).call()); // return await contract.methods.registeredDSPs(dsp).call();\n};\n\nconst fetchServices = async thisObject => {\n  for (let i = 0; i < (await fetchLastJob()); i++) {\n    const job = await contract.methods.services(i).call();\n    services.push(job);\n  }\n\n  console.log(`services: ${services}`);\n  thisObject.setState({\n    services: JSON.stringify(services)\n  });\n};\n\nconst postJobOrService = async form => {\n  const abi = returnAbi(\"run\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.consumer, form.imageName, form.inputFS, form.args]);\n  const txHash = await runTrx(data);\n  await fetchContractEvent(\"Run\");\n};\n\nconst runJob = async form => {\n  const abi = returnAbi(\"jobCallback\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.jobId, form.outputFS, form.dapps]);\n  const txHash = await runTrx(data);\n  await contract.events.JobResult({}, function (error, event) {\n    console.log(error);\n    console.log(event);\n  });\n  await contract.events.JobDone({}, function (error, event) {\n    console.log(error);\n    console.log(event);\n  });\n};\n\nconst runService = async form => {\n  const abi = returnAbi(\"serviceCallback\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.jobId, form.port, form.serviceDapps]);\n  const txHash = await runTrx(data);\n  await contract.events.ServiceRunning({}, function (error, event) {\n    console.log(error);\n    console.log(event);\n  });\n};\n\nconst setDockerImage = async form => {\n  const abi = returnAbi(\"setDockerImage\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.imageName, form.imageAddress, form.imageHash, form.imageType]);\n  const txHash = await runTrx(data);\n  await contract.events.DockerSet({}, function (error, event) {\n    console.log(error);\n    console.log(event);\n  });\n};\n\nconst approveDockerImage = async form => {\n  const abi = returnAbi(\"approveDockerForDSP\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.imageName]);\n  const txHash = await runTrx(data);\n  await contract.events.DockerSet({}, function (error, event) {\n    console.log(error);\n    console.log(event);\n  });\n};\n\nconst runTrx = async data => {\n  const transactionParameters = {\n    nonce: '0x00',\n    gasPrice: '2000000000',\n    gasLimit: '21000',\n    to: contractAddress,\n    from: ethereum.selectedAddress,\n    value: '0x00',\n    data,\n    chainId: '0x3' // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n\n  };\n  return await ethereum.request({\n    method: 'eth_sendTransaction',\n    params: [transactionParameters]\n  });\n};\n\nexport default {\n  fetchJobs,\n  fetchServices,\n  fetchDspInfo,\n  postJobOrService,\n  runJob,\n  runService,\n  setDockerImage,\n  approveDockerImage\n};","map":{"version":3,"sources":["/Users/natanaelprudhomme/Workspaces/dapp-workers/uis/jobs/src/lib/web3/index.js"],"names":["Web3","NexusJSON","jobs","services","provider","providers","WebsocketProvider","web3","contractAddress","contract","eth","Contract","abi","ethereum","window","returnAbi","func","find","el","name","type","fetchContractEvent","event","console","log","events","error","fetchLastJob","methods","lastJobID","call","fetchJobs","thisObject","i","job","push","setState","JSON","stringify","fetchDspInfo","dsp","registeredDSPs","fetchServices","postJobOrService","form","data","encodeFunctionCall","consumer","imageName","inputFS","args","txHash","runTrx","runJob","jobId","outputFS","dapps","JobResult","JobDone","runService","port","serviceDapps","ServiceRunning","setDockerImage","imageAddress","imageHash","imageType","DockerSet","approveDockerImage","transactionParameters","nonce","gasPrice","gasLimit","to","from","selectedAddress","value","chainId","request","method","params"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\nimport NexusJSON from '../../abi/Nexus.json';\n\nconst jobs = [];\nconst services = [];\nconst provider = new Web3.providers.WebsocketProvider('ws://localhost:8545');\nconst web3 = new Web3(provider);\nconst contractAddress = \"0x94D387F50569200aDACFd903345D077ef6ABcE11\";\nconst contract = new web3.eth.Contract(NexusJSON.abi,contractAddress);\nconst ethereum = window.ethereum;\n\nconst returnAbi = (func) => {\n    return NexusJSON.abi.find(el => el.name == func && el.type == \"function\");\n}\n\nconst fetchContractEvent = async (event) => {\n    console.log(`before`);\n    await contract.events[event]({}, function(error, event){\n        console.log(error);\n        console.log(event);\n    });\n    console.log(`after`);\n}\n\nconst fetchLastJob = async () => {\n    return await contract.methods.lastJobID().call();\n}\n\nconst fetchJobs = async (thisObject) => {\n    for(let i=0; i < await fetchLastJob(); i++) {\n        const job = await contract.methods.jobs(i).call();\n        jobs.push(job);\n    }\n    thisObject.setState({jobs: JSON.stringify(jobs)});\n}\n\nconst fetchDspInfo = async (dsp) => {\n    console.log(await contract.methods.registeredDSPs(dsp).call());\n    // return await contract.methods.registeredDSPs(dsp).call();\n}\n\nconst fetchServices = async (thisObject) => {\n    for(let i=0; i < await fetchLastJob(); i++) {\n        const job = await contract.methods.services(i).call();\n        services.push(job);\n    }\n    console.log(`services: ${services}`);\n    thisObject.setState({services: JSON.stringify(services)});\n}\n\nconst postJobOrService = async (form) => {\n    const abi = returnAbi(\"run\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.consumer,\n        form.imageName,\n        form.inputFS,\n        form.args\n    ]);\n\n    const txHash = await runTrx(data);\n    await fetchContractEvent(\"Run\");\n}\n\nconst runJob = async (form) => {\n    const abi = returnAbi(\"jobCallback\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.jobId,\n        form.outputFS,\n        form.dapps\n    ]);\n\n    const txHash = await runTrx(data);\n    await contract.events.JobResult({}, function(error, event){\n        console.log(error);\n        console.log(event);\n    });\n    await contract.events.JobDone({}, function(error, event){\n        console.log(error);\n        console.log(event);\n    });\n}\n\nconst runService = async (form) => {\n    const abi = returnAbi(\"serviceCallback\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.jobId,\n        form.port,\n        form.serviceDapps\n    ]);\n\n    const txHash = await runTrx(data);\n    await contract.events.ServiceRunning({}, function(error, event){\n        console.log(error);\n        console.log(event);\n    });\n}\n\nconst setDockerImage = async (form) => {\n    const abi = returnAbi(\"setDockerImage\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.imageName,\n        form.imageAddress,\n        form.imageHash,\n        form.imageType\n    ]);\n\n    const txHash = await runTrx(data);\n    await contract.events.DockerSet({}, function(error, event){\n        console.log(error);\n        console.log(event);\n    });\n}\n\nconst approveDockerImage = async (form) => {\n    const abi = returnAbi(\"approveDockerForDSP\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.imageName\n    ]);\n\n    const txHash = await runTrx(data);\n    await contract.events.DockerSet({}, function(error, event){\n        console.log(error);\n        console.log(event);\n    });\n}\n\nconst runTrx = async (data) => {\n    const transactionParameters = {\n        nonce: '0x00',\n        gasPrice: '2000000000',\n        gasLimit: '21000',\n        to: contractAddress,\n        from: ethereum.selectedAddress,\n        value: '0x00',\n        data,\n        chainId: '0x3', // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n    };\n    return await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n    });\n}\n\nexport default { \n    fetchJobs,\n    fetchServices,\n    fetchDspInfo,\n    postJobOrService,\n    runJob,\n    runService,\n    setDockerImage,\n    approveDockerImage\n}"]},"metadata":{},"sourceType":"module"}