{"ast":null,"code":"import Web3 from 'web3';\nimport NexusJSON from '../../abi/Nexus.json';\nconst jobs = [];\nconst services = []; // const provider = new Web3.providers.WebsocketProvider('ws://localhost:8545');\n// const web3 = new Web3(provider);\n\nconst web3 = new Web3('http://localhost:8545');\nconst contractAddress = \"0x94D387F50569200aDACFd903345D077ef6ABcE11\";\nconst contract = new web3.eth.Contract(NexusJSON.abi, contractAddress);\nconst ethereum = window.ethereum;\n\nconst returnAbi = func => {\n  return NexusJSON.abi.find(el => el.name == func && el.type == \"function\");\n};\n\nconst fetchLastJob = async () => {\n  return await contract.methods.lastJobID().call();\n};\n\nconst fetchJobs = async thisObject => {\n  for (let i = 0; i < (await fetchLastJob()); i++) {\n    const job = await contract.methods.jobs(i).call();\n    jobs.push(job);\n  }\n\n  thisObject.setState({\n    jobs: JSON.stringify(jobs)\n  });\n};\n\nconst fetchServices = async thisObject => {\n  for (let i = 0; i < (await fetchLastJob()); i++) {\n    const job = await contract.methods.services(i).call();\n    services.push(job);\n  }\n\n  console.log(`services: ${services}`);\n  thisObject.setState({\n    services: JSON.stringify(services)\n  });\n};\n\nconst postJobOrService = async form => {\n  const abi = returnAbi(\"run\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.consumer, form.imageName, form.inputFS, form.args]);\n  const transactionParameters = {\n    nonce: '0x00',\n    gasPrice: '2000000000',\n    gasLimit: '21000',\n    to: contractAddress,\n    from: ethereum.selectedAddress,\n    value: '0x00',\n    data,\n    chainId: '0x3' // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n\n  };\n  const txHash = await ethereum.request({\n    method: 'eth_sendTransaction',\n    params: [transactionParameters]\n  });\n  console.log(`trx: ${txHash}`); // await contract.events.Run({}, function(error, event){\n  //     console.log(error);\n  //     console.log(event); \n  // });\n}; // uint256 jobID, string memory outputFS, uint256 dapps\n\n\nconst runJob = async form => {\n  const abi = returnAbi(\"jobCallback\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.jobID, form.outputFS, form.dapps]);\n  const transactionParameters = {\n    nonce: '0x00',\n    gasPrice: '2000000000',\n    gasLimit: '21000',\n    to: contractAddress,\n    from: ethereum.selectedAddress,\n    value: '0x00',\n    data,\n    chainId: '0x3' // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n\n  };\n  const txHash = await ethereum.request({\n    method: 'eth_sendTransaction',\n    params: [transactionParameters]\n  });\n  console.log(`trx: ${txHash}`); // await contract.events.ServiceRunning({}, function(error, event){\n  //     console.log(error);\n  //     console.log(event); \n  // });\n};\n\nconst runService = async form => {\n  const abi = returnAbi(\"serviceCallback\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.jobID, form.port, form.dapps]);\n  const transactionParameters = {\n    nonce: '0x00',\n    gasPrice: '2000000000',\n    gasLimit: '21000',\n    to: contractAddress,\n    from: ethereum.selectedAddress,\n    value: '0x00',\n    data,\n    chainId: '0x3' // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n\n  };\n  const txHash = await ethereum.request({\n    method: 'eth_sendTransaction',\n    params: [transactionParameters]\n  });\n  console.log(`trx: ${txHash}`); // await contract.events.ServiceRunning({}, function(error, event){\n  //     console.log(error);\n  //     console.log(event); \n  // });\n};\n\nexport default {\n  fetchJobs,\n  fetchServices,\n  postJobOrService,\n  runService\n};","map":{"version":3,"sources":["/Users/natanaelprudhomme/Workspaces/dapp-workers/uis/jobs/src/lib/web3/index.js"],"names":["Web3","NexusJSON","jobs","services","web3","contractAddress","contract","eth","Contract","abi","ethereum","window","returnAbi","func","find","el","name","type","fetchLastJob","methods","lastJobID","call","fetchJobs","thisObject","i","job","push","setState","JSON","stringify","fetchServices","console","log","postJobOrService","form","data","encodeFunctionCall","consumer","imageName","inputFS","args","transactionParameters","nonce","gasPrice","gasLimit","to","from","selectedAddress","value","chainId","txHash","request","method","params","runJob","jobID","outputFS","dapps","runService","port"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\nimport NexusJSON from '../../abi/Nexus.json';\n\nconst jobs = [];\nconst services = [];\n// const provider = new Web3.providers.WebsocketProvider('ws://localhost:8545');\n// const web3 = new Web3(provider);\nconst web3 = new Web3('http://localhost:8545');\nconst contractAddress = \"0x94D387F50569200aDACFd903345D077ef6ABcE11\";\nconst contract = new web3.eth.Contract(NexusJSON.abi,contractAddress);\nconst ethereum = window.ethereum;\n\nconst returnAbi = (func) => {\n    return NexusJSON.abi.find(el => el.name == func && el.type == \"function\");\n}\n\nconst fetchLastJob = async () => {\n    return await contract.methods.lastJobID().call();\n}\n\nconst fetchJobs = async (thisObject) => {\n    for(let i=0; i < await fetchLastJob(); i++) {\n        const job = await contract.methods.jobs(i).call();\n        jobs.push(job);\n    }\n    thisObject.setState({jobs: JSON.stringify(jobs)});\n}\n\nconst fetchServices = async (thisObject) => {\n    for(let i=0; i < await fetchLastJob(); i++) {\n        const job = await contract.methods.services(i).call();\n        services.push(job);\n    }\n    console.log(`services: ${services}`);\n    thisObject.setState({services: JSON.stringify(services)});\n}\n\nconst postJobOrService = async (form) => {\n    const abi = returnAbi(\"run\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.consumer,\n        form.imageName,\n        form.inputFS,\n        form.args\n    ]);\n    const transactionParameters = {\n        nonce: '0x00',\n        gasPrice: '2000000000',\n        gasLimit: '21000',\n        to: contractAddress,\n        from: ethereum.selectedAddress,\n        value: '0x00',\n        data,\n        chainId: '0x3', // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n    };\n\n    const txHash = await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n    });\n    console.log(`trx: ${txHash}`);\n    // await contract.events.Run({}, function(error, event){\n    //     console.log(error);\n    //     console.log(event); \n    // });\n}\n\n// uint256 jobID, string memory outputFS, uint256 dapps\nconst runJob = async (form) => {\n    const abi = returnAbi(\"jobCallback\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.jobID,\n        form.outputFS,\n        form.dapps\n    ]);\n    const transactionParameters = {\n        nonce: '0x00',\n        gasPrice: '2000000000',\n        gasLimit: '21000',\n        to: contractAddress,\n        from: ethereum.selectedAddress,\n        value: '0x00',\n        data,\n        chainId: '0x3', // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n    };\n\n    const txHash = await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n    });\n    console.log(`trx: ${txHash}`);\n    // await contract.events.ServiceRunning({}, function(error, event){\n    //     console.log(error);\n    //     console.log(event); \n    // });\n}\n\nconst runService = async (form) => {\n    const abi = returnAbi(\"serviceCallback\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.jobID,\n        form.port,\n        form.dapps\n    ]);\n    const transactionParameters = {\n        nonce: '0x00',\n        gasPrice: '2000000000',\n        gasLimit: '21000',\n        to: contractAddress,\n        from: ethereum.selectedAddress,\n        value: '0x00',\n        data,\n        chainId: '0x3', // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n    };\n\n    const txHash = await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n    });\n    console.log(`trx: ${txHash}`);\n    // await contract.events.ServiceRunning({}, function(error, event){\n    //     console.log(error);\n    //     console.log(event); \n    // });\n}\n\nexport default { \n    fetchJobs,\n    fetchServices,\n    postJobOrService,\n    runService\n}"]},"metadata":{},"sourceType":"module"}