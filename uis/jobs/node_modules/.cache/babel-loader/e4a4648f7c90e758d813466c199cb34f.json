{"ast":null,"code":"var _jsxFileName = \"/Users/natanaelprudhomme/Workspaces/dapp-workers/uis/jobs/src/containers/Home/Home.jsx\";\nimport React, { Component } from 'react';\nimport classes from './Home.module.scss';\nimport Header from '../../components/Header/Header';\nimport Jobs from '../../components/Home/Jobs/Jobs';\nimport Services from '../../components/Home/Services/Services';\nimport Form from '../../components/UI/Form/Form';\nimport Footer from '../../components/Footer/Footer';\nimport lib from '../../lib/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ethereum = window.ethereum;\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.forms = [{\n      onClick: () => lib.web3.postJobOrService(this),\n      buttonText: \"Post Job or Service\",\n      event: \"run\",\n      inputs: [{\n        name: \"consumer\",\n        placeholder: \"address consumer\"\n      }, {\n        name: \"imageName\",\n        placeholder: \"string imageName\"\n      }, {\n        name: \"inputFS\",\n        placeholder: \"string inputFS\"\n      }, {\n        name: \"args\",\n        placeholder: \"string[] args\"\n      }]\n    }, {\n      onClick: () => lib.web3.runJob(this),\n      buttonText: \"Run Job\",\n      event: \"runJob\",\n      inputs: [{\n        name: \"jobID\",\n        placeholder: \"uint256 jobID\"\n      }, {\n        name: \"outputFS\",\n        placeholder: \"string outputFS\"\n      }, {\n        name: \"dapps\",\n        placeholder: \"uint256 dapps\"\n      }]\n    }, {\n      onClick: () => lib.web3.runService(this),\n      buttonText: \"Run Service\",\n      event: \"runService\",\n      inputs: [{\n        name: \"jobId\",\n        placeholder: \"uint256 jobId\"\n      }, {\n        name: \"port\",\n        placeholder: \"uint256 port\"\n      }, {\n        name: \"dapps\",\n        placeholder: \"uint256 dapps\"\n      }]\n    }, {\n      onClick: () => lib.web3.setDockerImage(this),\n      buttonText: \"Set Docker Image\",\n      event: \"setDockerImage\",\n      inputs: [{\n        name: \"imageName\",\n        placeholder: \"string imageName\"\n      }, {\n        name: \"imageAddress\",\n        placeholder: \"string imageAddress\"\n      }, {\n        name: \"imageHash\",\n        placeholder: \"string imageHash\"\n      }, {\n        name: \"imageType\",\n        placeholder: \"string imageType\"\n      }]\n    }, {\n      onClick: () => lib.web3.approveDockerImage(this),\n      buttonText: \"Approve Docker Image\",\n      event: \"approveDocker\",\n      inputs: [{\n        name: \"imageName\",\n        placeholder: \"string imageName\"\n      }]\n    }, {\n      onClick: () => lib.web3.fetchDspInfo(this.state.registeredDSPs.dsp),\n      buttonText: \"Fetch DSP Info\",\n      event: \"registeredDSPs\",\n      inputs: [{\n        name: \"dsp\",\n        placeholder: \"address dsp\"\n      }]\n    }, {\n      onClick: () => lib.web3.fetchDspData(this),\n      buttonText: \"Fetch DSP Data\",\n      event: \"dspData\",\n      inputs: [{\n        name: \"consumer\",\n        placeholder: \"address consumer\"\n      }, {\n        name: \"dsp\",\n        placeholder: \"address dsp\"\n      }]\n    }, {\n      onClick: () => lib.web3.fetchConsumerData(this),\n      buttonText: \"Fetch Consumer Data\",\n      event: \"consumerDataForm\",\n      inputs: [{\n        name: \"consumer\",\n        placeholder: \"address consumer\"\n      }]\n    }, {\n      onClick: () => lib.web3._(),\n      buttonText: \"\",\n      event: \"\",\n      inputs: [{\n        name: \"\",\n        placeholder: \"\"\n      }]\n    }\n    /* \n        dspData\n        consumerData\n        dockerImages\n        getDSPEndpoint\n        getPortForDSP\n        unapproveDockerForDSP\n        isImageApprovedForDSP\n        getDockerImage\n        deprecateDSP\n        regDSP\n        claimFor\n        sellGas\n        buyGasFor\n        setConsumerCallback\n        setConsumerPermissions\n        setQuorum\n        jobError\n        serviceError \n    */\n    ];\n    this.state = {\n      account: null,\n      chainId: null,\n      jobs: [],\n      services: [],\n      connectInfo: null,\n      disconnectInfo: null,\n      trxInfo: null,\n      events: [],\n      image: null,\n      port: null,\n      endpoint: null,\n      approvedImage: null,\n      dspData: null,\n      consumerData: null,\n      run: {\n        consumer: '0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f',\n        imageName: 'rust-compiler',\n        inputFS: 'QmUm1JD5os8p6zu6gQBPr7Rov2VD6QzMeRBH5j4ojFBzi6',\n        args: []\n      },\n      runJob: {\n        jobId: 5,\n        outputFS: '',\n        dapps: 804000\n      },\n      runService: {\n        jobId: 5,\n        port: 8080,\n        dapps: 804000\n      },\n      setDockerImage: {\n        imageName: '',\n        imageAddress: '',\n        imageHash: '',\n        imageType: ''\n      },\n      approveDocker: {\n        imageName: ''\n      },\n      registeredDSPs: {\n        dsp: '0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f'\n      },\n      getDockerImage: {\n        imageName: ''\n      },\n      isImageApprovedForDSP: {\n        imageName: ''\n      },\n      getPortForDSP: {\n        jobID: '',\n        dsp: ''\n      },\n      getDSPEndpoint: {\n        dsp: ''\n      },\n      unapproveDockerForDSP: {\n        imageName: ''\n      },\n      regDSP: {\n        endpoint: ''\n      },\n      claimFor: {\n        _consumer: '',\n        _dsp: ''\n      },\n      sellGas: {\n        _amountToSell: '',\n        _dsp: ''\n      },\n      buyGasFor: {\n        _amount: '',\n        _consumer: '',\n        _dsp: ''\n      },\n      setConsumerCallback: {\n        enabled: null\n      },\n      setConsumerPermissions: {\n        owner: ''\n      },\n      setQuorum: {\n        consumer: '',\n        dsps: []\n      },\n      jobError: {\n        jobID: '',\n        stdErr: '',\n        outputFS: ''\n      },\n      serviceError: {\n        jobID: '',\n        stdErr: '',\n        outputFS: ''\n      },\n      dspData: {\n        account: '0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f',\n        dsp: '0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f'\n      },\n      consumerDataForm: {\n        consumer: '0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f'\n      }\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const accounts = ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    lib.web3.fetchJobs(this);\n    lib.web3.fetchServices(this);\n    lib.metamask.runHandlers(this);\n    this.setState({\n      account: accounts[0]\n    });\n  }\n\n  componentWillUnmount() {\n    lib.metamask.rmHandlers();\n  }\n\n  handleChange(event, func) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [func]: { ...this.state[func],\n        [name]: value,\n        error: ''\n      }\n    });\n  }\n\n  render() {\n    const forms = this.forms.map(el => {\n      return /*#__PURE__*/_jsxDEV(Form, {\n        onClick: el.onClick,\n        onChange: this.handleChange,\n        buttonText: el.buttonText,\n        event: el.event,\n        inputs: el.inputs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        login: () => lib.metamask.login(this),\n        logout: () => lib.metamask.logout(this),\n        account: this.state.account\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this), forms, /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/natanaelprudhomme/Workspaces/dapp-workers/uis/jobs/src/containers/Home/Home.jsx"],"names":["React","Component","classes","Header","Jobs","Services","Form","Footer","lib","ethereum","window","Home","constructor","props","forms","onClick","web3","postJobOrService","buttonText","event","inputs","name","placeholder","runJob","runService","setDockerImage","approveDockerImage","fetchDspInfo","state","registeredDSPs","dsp","fetchDspData","fetchConsumerData","_","account","chainId","jobs","services","connectInfo","disconnectInfo","trxInfo","events","image","port","endpoint","approvedImage","dspData","consumerData","run","consumer","imageName","inputFS","args","jobId","outputFS","dapps","imageAddress","imageHash","imageType","approveDocker","getDockerImage","isImageApprovedForDSP","getPortForDSP","jobID","getDSPEndpoint","unapproveDockerForDSP","regDSP","claimFor","_consumer","_dsp","sellGas","_amountToSell","buyGasFor","_amount","setConsumerCallback","enabled","setConsumerPermissions","owner","setQuorum","dsps","jobError","stdErr","serviceError","consumerDataForm","handleChange","bind","componentDidMount","accounts","request","method","fetchJobs","fetchServices","metamask","runHandlers","setState","componentWillUnmount","rmHandlers","func","value","target","error","render","map","el","login","logout"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport classes from './Home.module.scss';\nimport Header from '../../components/Header/Header';\nimport Jobs from '../../components/Home/Jobs/Jobs';\nimport Services from '../../components/Home/Services/Services';\nimport Form from '../../components/UI/Form/Form';\nimport Footer from '../../components/Footer/Footer';\nimport lib from '../../lib/index';\n\nconst ethereum = window.ethereum;\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            account: null,\n            chainId: null,\n            jobs: [],\n            services: [],\n            connectInfo: null,\n            disconnectInfo: null,\n            trxInfo: null,\n            events: [],\n            image:null,\n            port:null,\n            endpoint:null,\n            approvedImage:null,\n            dspData:null,\n            consumerData:null,\n            run: {\n                consumer: '0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f',\n                imageName: 'rust-compiler',\n                inputFS: 'QmUm1JD5os8p6zu6gQBPr7Rov2VD6QzMeRBH5j4ojFBzi6',\n                args: []\n            },\n            runJob: {\n                jobId: 5,\n                outputFS: '',\n                dapps: 804000\n            },\n            runService: {\n                jobId: 5,\n                port: 8080,\n                dapps: 804000\n            },\n            setDockerImage: {\n                imageName: '',\n                imageAddress: '',\n                imageHash: '',\n                imageType: ''\n            },\n            approveDocker: {\n                imageName: ''\n            },\n            registeredDSPs: {\n                dsp:'0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f'\n            },\n            getDockerImage: {\n                imageName:''\n            },\n            isImageApprovedForDSP: {\n                imageName:''\n            },\n            getPortForDSP: {\n                jobID:'',\n                dsp:''\n            },\n            getDSPEndpoint: {\n                dsp:''\n            },\n            unapproveDockerForDSP: {\n                imageName:''\n            },\n            regDSP: {\n                endpoint:''\n            },\n            claimFor: {\n                _consumer:'',\n                _dsp:''\n            },\n            sellGas: {\n                _amountToSell:'',\n                _dsp:''\n            },\n            buyGasFor: {\n                _amount:'',\n                _consumer:'',\n                _dsp:''\n            },\n            setConsumerCallback: {\n                enabled:null\n            },\n            setConsumerPermissions: {\n                owner:''\n            },\n            setQuorum: {\n                consumer:'',\n                dsps:[]\n            },\n            jobError: {\n                jobID:'',\n                stdErr:'',\n                outputFS:''\n            },\n            serviceError: {\n                jobID:'',\n                stdErr:'',\n                outputFS:''\n            },\n            dspData: {\n                account: '0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f',\n                dsp:'0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f'\n            },\n            consumerDataForm: {\n                consumer: '0xe26f809e5826fd8e1c0da1e6d9f308da9d86de4f'\n            }\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        const accounts = ethereum.request({ method: 'eth_requestAccounts' });\n        lib.web3.fetchJobs(this);\n        lib.web3.fetchServices(this);\n        lib.metamask.runHandlers(this);\n        this.setState({ account: accounts[0] });\n    }\n\n    componentWillUnmount() {\n        lib.metamask.rmHandlers();\n    }\n\n    handleChange(event, func) {\n        const { name, value } = event.target;\n        this.setState({\n            [func]: {\n                ...this.state[func],\n                [name]: value,\n                error: '',\n            },\n        });\n    }\n\n    forms = [\n        {\n            onClick:()=>lib.web3.postJobOrService(this),\n            buttonText:\"Post Job or Service\",\n            event:\"run\",\n            inputs:[\n                { name:\"consumer\",placeholder: \"address consumer\"},\n                { name:\"imageName\",placeholder: \"string imageName\"},\n                { name:\"inputFS\",placeholder: \"string inputFS\"},\n                { name:\"args\",placeholder: \"string[] args\"}\n            ]\n        },\n        {\n            onClick:()=>lib.web3.runJob(this),\n            buttonText:\"Run Job\",\n            event:\"runJob\",\n            inputs:[\n                { name:\"jobID\",placeholder: \"uint256 jobID\"},\n                { name:\"outputFS\",placeholder: \"string outputFS\"},\n                { name:\"dapps\",placeholder: \"uint256 dapps\"},\n            ]\n        },\n        {\n            onClick:()=>lib.web3.runService(this),\n            buttonText:\"Run Service\",\n            event:\"runService\",\n            inputs:[\n                { name:\"jobId\",placeholder: \"uint256 jobId\"},\n                { name:\"port\",placeholder: \"uint256 port\"},\n                { name:\"dapps\",placeholder: \"uint256 dapps\"},\n            ]\n        },\n        {\n            onClick:()=>lib.web3.setDockerImage(this),\n            buttonText:\"Set Docker Image\",\n            event:\"setDockerImage\",\n            inputs:[\n                { name:\"imageName\",placeholder: \"string imageName\"},\n                { name:\"imageAddress\",placeholder: \"string imageAddress\"},\n                { name:\"imageHash\",placeholder: \"string imageHash\"},\n                { name:\"imageType\",placeholder: \"string imageType\"},\n            ]\n        },\n        {\n            onClick:()=>lib.web3.approveDockerImage(this),\n            buttonText:\"Approve Docker Image\",\n            event:\"approveDocker\",\n            inputs:[\n                { name:\"imageName\",placeholder: \"string imageName\"},\n            ]\n        },\n        {\n            onClick:()=>lib.web3.fetchDspInfo(this.state.registeredDSPs.dsp),\n            buttonText:\"Fetch DSP Info\",\n            event:\"registeredDSPs\",\n            inputs:[\n                { name:\"dsp\",placeholder: \"address dsp\"},\n            ]\n        },\n        {\n            onClick:()=>lib.web3.fetchDspData(this),\n            buttonText:\"Fetch DSP Data\",\n            event:\"dspData\",\n            inputs:[\n                { name:\"consumer\",placeholder: \"address consumer\"},\n                { name:\"dsp\",placeholder: \"address dsp\"},\n            ]\n        },\n        {\n            onClick:()=>lib.web3.fetchConsumerData(this),\n            buttonText:\"Fetch Consumer Data\",\n            event:\"consumerDataForm\",\n            inputs:[\n                { name:\"consumer\",placeholder: \"address consumer\"},\n            ]\n        },\n        {\n            onClick:()=>lib.web3._(),\n            buttonText:\"\",\n            event:\"\",\n            inputs:[\n                { name:\"\",placeholder: \"\"},\n            ]\n        }\n        /* \n            dspData\n            consumerData\n            dockerImages\n            getDSPEndpoint\n            getPortForDSP\n            unapproveDockerForDSP\n            isImageApprovedForDSP\n            getDockerImage\n            deprecateDSP\n            regDSP\n            claimFor\n            sellGas\n            buyGasFor\n            setConsumerCallback\n            setConsumerPermissions\n            setQuorum\n            jobError\n            serviceError \n        */\n    ]\n  \n    render() {\n        const forms = this.forms.map(el => {\n            return (\n                <Form\n                    onClick={el.onClick}\n                    onChange={this.handleChange}\n                    buttonText={el.buttonText}\n                    event={el.event}\n                    inputs={el.inputs}\n                />\n            )\n        })\n        return (\n            <div>\n                <Header\n                    login={()=>lib.metamask.login(this)}\n                    logout={()=>lib.metamask.logout(this)}\n                    account={this.state.account}\n                />\n                {/* <Jobs\n                    jobs={this.state.jobs}\n                />\n                <Services\n                    services={this.state.services}\n                /> */}\n                {forms}\n                <Footer/>\n            </div>\n        );\n    }\n  }\n  \n  export default Home;\n  "]},"metadata":{},"sourceType":"module"}