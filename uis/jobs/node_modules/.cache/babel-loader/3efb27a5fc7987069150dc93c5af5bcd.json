{"ast":null,"code":"import Web3 from 'web3';\nimport NexusJSON from '../../abi/Nexus.json';\nconst jobs = [];\nconst services = [];\nconst provider = new Web3.providers.WebsocketProvider('ws://localhost:8545');\nconst web3 = new Web3(provider);\nconst contractAddress = \"0x94D387F50569200aDACFd903345D077ef6ABcE11\";\nconst contract = new web3.eth.Contract(NexusJSON.abi, contractAddress);\nconst ethereum = window.ethereum;\n\nconst returnAbi = func => {\n  return NexusJSON.abi.find(el => el.name == func && el.type == \"function\");\n};\n\nconst watchEvents = () => {};\n\nconst fetchLastJob = async () => {\n  return await contract.methods.lastJobID().call();\n};\n\nconst fetchJobs = async thisObject => {\n  for (let i = 0; i < (await fetchLastJob()); i++) {\n    const job = await contract.methods.jobs(i).call();\n    jobs.push(job);\n  }\n\n  thisObject.setState({\n    jobs: JSON.stringify(jobs)\n  });\n};\n\nconst fetchDspInfo = async dsp => {\n  console.log(await contract.methods.registeredDSPs(dsp).call()); // return await contract.methods.registeredDSPs(dsp).call();\n};\n\nconst fetchServices = async thisObject => {\n  for (let i = 0; i < (await fetchLastJob()); i++) {\n    const job = await contract.methods.services(i).call();\n    services.push(job);\n  }\n\n  console.log(`services: ${services}`);\n  thisObject.setState({\n    services: JSON.stringify(services)\n  });\n};\n\nconst postJobOrService = async form => {\n  const abi = returnAbi(\"run\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.consumer, form.imageName, form.inputFS, form.args]);\n  const trxData = await runTrx(data, [\"Run\"]);\n};\n\nconst runJob = async form => {\n  const abi = returnAbi(\"jobCallback\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.jobId, form.outputFS, form.dapps]);\n  const trxData = await runTrx(data, [\"JobResult\", \"JobDone\"]);\n};\n\nconst runService = async form => {\n  const abi = returnAbi(\"serviceCallback\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.jobId, form.port, form.serviceDapps]);\n  const trxData = await runTrx(data, [\"ServiceRunning\"]);\n};\n\nconst setDockerImage = async form => {\n  const abi = returnAbi(\"setDockerImage\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.imageName, form.imageAddress, form.imageHash, form.imageType]);\n  const trxData = await runTrx(data, [\"DockerSet\"]);\n};\n\nconst approveDockerImage = async form => {\n  const abi = returnAbi(\"approveDockerForDSP\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [form.imageName]);\n  const trxData = await runTrx(data, [\"DockerApprovalChanged\"]);\n};\n/*\n     getDSPEndpoint\n    getPortForDSP\n    unapproveDockerForDSP\n    isImageApprovedForDSP\n    getDockerImage\n    deprecateDSP\n    regDSP\n    claimFor\n    sellGas\n    buyGasFor\n    setConsumerCallback\n    setConsumerPermissions\n    setQuorum\n    jobError\n    serviceError\n */\n\n\nconst runTrx = async (data, events) => {\n  const trxInfo = {\n    trxHash: null,\n    events: []\n  };\n  const transactionParameters = {\n    nonce: '0x00',\n    gasPrice: '2000000000',\n    gasLimit: '21000',\n    to: contractAddress,\n    from: ethereum.selectedAddress,\n    value: '0x00',\n    data,\n    chainId: '0x3' // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n\n  };\n  trxInfo.trxHash = await ethereum.request({\n    method: 'eth_sendTransaction',\n    params: [transactionParameters]\n  }).then(result => {\n    console.log(result);\n  }).catch(error => {\n    console.log(error);\n  });\n  ; // if(events.length) {\n  //     for(const name of events) {\n  //         const eventInfo = await fetchContractEvent(name);\n  //         console.log(eventInfo);\n  //         trxInfo.events.push({name, ...eventInfo});\n  //     }\n  // }\n  // console.log(trxInfo);\n\n  return trxInfo;\n};\n\nexport default {\n  fetchJobs,\n  fetchServices,\n  fetchDspInfo,\n  postJobOrService,\n  runJob,\n  runService,\n  setDockerImage,\n  approveDockerImage\n};","map":{"version":3,"sources":["/Users/natanaelprudhomme/Workspaces/dapp-workers/uis/jobs/src/lib/web3/index.js"],"names":["Web3","NexusJSON","jobs","services","provider","providers","WebsocketProvider","web3","contractAddress","contract","eth","Contract","abi","ethereum","window","returnAbi","func","find","el","name","type","watchEvents","fetchLastJob","methods","lastJobID","call","fetchJobs","thisObject","i","job","push","setState","JSON","stringify","fetchDspInfo","dsp","console","log","registeredDSPs","fetchServices","postJobOrService","form","data","encodeFunctionCall","consumer","imageName","inputFS","args","trxData","runTrx","runJob","jobId","outputFS","dapps","runService","port","serviceDapps","setDockerImage","imageAddress","imageHash","imageType","approveDockerImage","events","trxInfo","trxHash","transactionParameters","nonce","gasPrice","gasLimit","to","from","selectedAddress","value","chainId","request","method","params","then","result","catch","error"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\nimport NexusJSON from '../../abi/Nexus.json';\n\nconst jobs = [];\nconst services = [];\nconst provider = new Web3.providers.WebsocketProvider('ws://localhost:8545');\nconst web3 = new Web3(provider);\nconst contractAddress = \"0x94D387F50569200aDACFd903345D077ef6ABcE11\";\nconst contract = new web3.eth.Contract(NexusJSON.abi,contractAddress);\nconst ethereum = window.ethereum;\n\nconst returnAbi = (func) => {\n    return NexusJSON.abi.find(el => el.name == func && el.type == \"function\");\n}\n\nconst watchEvents = () => {\n\n}\n\nconst fetchLastJob = async () => {\n    return await contract.methods.lastJobID().call();\n}\n\nconst fetchJobs = async (thisObject) => {\n    for(let i=0; i < await fetchLastJob(); i++) {\n        const job = await contract.methods.jobs(i).call();\n        jobs.push(job);\n    }\n    thisObject.setState({jobs: JSON.stringify(jobs)});\n}\n\nconst fetchDspInfo = async (dsp) => {\n    console.log(await contract.methods.registeredDSPs(dsp).call());\n    // return await contract.methods.registeredDSPs(dsp).call();\n}\n\nconst fetchServices = async (thisObject) => {\n    for(let i=0; i < await fetchLastJob(); i++) {\n        const job = await contract.methods.services(i).call();\n        services.push(job);\n    }\n    console.log(`services: ${services}`);\n    thisObject.setState({services: JSON.stringify(services)});\n}\n\nconst postJobOrService = async (form) => {\n    const abi = returnAbi(\"run\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.consumer,\n        form.imageName,\n        form.inputFS,\n        form.args\n    ]);\n\n    const trxData = await runTrx(data,[\"Run\"]);\n}\n\nconst runJob = async (form) => {\n    const abi = returnAbi(\"jobCallback\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.jobId,\n        form.outputFS,\n        form.dapps\n    ]);\n\n    const trxData = await runTrx(data,[\"JobResult\",\"JobDone\"]);\n}\n\nconst runService = async (form) => {\n    const abi = returnAbi(\"serviceCallback\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.jobId,\n        form.port,\n        form.serviceDapps\n    ]);\n\n    const trxData = await runTrx(data,[\"ServiceRunning\"]);\n}\n\nconst setDockerImage = async (form) => {\n    const abi = returnAbi(\"setDockerImage\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.imageName,\n        form.imageAddress,\n        form.imageHash,\n        form.imageType\n    ]);\n\n    const trxData = await runTrx(data,[\"DockerSet\"]);\n}\n\nconst approveDockerImage = async (form) => {\n    const abi = returnAbi(\"approveDockerForDSP\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        form.imageName\n    ]);\n\n    const trxData = await runTrx(data,[\"DockerApprovalChanged\"]);\n}\n\n    /*\n\n        getDSPEndpoint\n        getPortForDSP\n        unapproveDockerForDSP\n        isImageApprovedForDSP\n        getDockerImage\n        deprecateDSP\n        regDSP\n        claimFor\n        sellGas\n        buyGasFor\n        setConsumerCallback\n        setConsumerPermissions\n        setQuorum\n        jobError\n        serviceError\n\n    */\n\nconst runTrx = async (data,events) => {\n    const trxInfo = {\n        trxHash: null,\n        events: []\n    };\n    const transactionParameters = {\n        nonce: '0x00',\n        gasPrice: '2000000000',\n        gasLimit: '21000',\n        to: contractAddress,\n        from: ethereum.selectedAddress,\n        value: '0x00',\n        data,\n        chainId: '0x3', // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n    };\n    trxInfo.trxHash = await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n    })\n    .then((result) => {\n        console.log(result);\n    })\n    .catch((error) => {\n        console.log(error);\n    });;\n    // if(events.length) {\n    //     for(const name of events) {\n    //         const eventInfo = await fetchContractEvent(name);\n    //         console.log(eventInfo);\n    //         trxInfo.events.push({name, ...eventInfo});\n    //     }\n    // }\n    // console.log(trxInfo);\n    return trxInfo;\n}\n\nexport default { \n    fetchJobs,\n    fetchServices,\n    fetchDspInfo,\n    postJobOrService,\n    runJob,\n    runService,\n    setDockerImage,\n    approveDockerImage\n}"]},"metadata":{},"sourceType":"module"}