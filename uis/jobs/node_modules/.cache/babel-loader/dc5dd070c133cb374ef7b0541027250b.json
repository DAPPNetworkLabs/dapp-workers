{"ast":null,"code":"import Web3 from 'web3';\nimport NexusJSON from '../../abi/Nexus.json';\nconst jobs = [];\nconst services = [];\nconst provider = new Web3.providers.WebsocketProvider('ws://localhost:8545');\nconst web3 = new Web3(provider);\nconst contractAddress = \"0x94D387F50569200aDACFd903345D077ef6ABcE11\";\nconst contract = new web3.eth.Contract(NexusJSON.abi, contractAddress);\nconst ethereum = window.ethereum;\n\nconst returnAbi = func => {\n  return NexusJSON.abi.find(el => el.name == func && el.type == \"function\");\n};\n\nconst subscribeContractEvent = (eventName, thisObject) => {\n  contract.once(eventName, function (error, event) {\n    console.log({\n      eventName,\n      event,\n      error\n    });\n    thisObject.setState({\n      events: [...thisObject.state.events, {\n        eventName,\n        event,\n        error\n      }]\n    });\n  });\n};\n\nconst fetchLastJob = async () => {\n  return await contract.methods.lastJobID().call();\n};\n\nconst fetchJobs = async thisObject => {\n  for (let i = 0; i < (await fetchLastJob()); i++) {\n    const job = await contract.methods.jobs(i).call();\n    jobs.push(job);\n  }\n\n  thisObject.setState({\n    jobs: JSON.stringify(jobs)\n  });\n};\n\nconst fetchDspInfo = async dsp => {\n  console.log(await contract.methods.registeredDSPs(dsp).call()); // return await contract.methods.registeredDSPs(dsp).call();\n};\n\nconst fetchServices = async thisObject => {\n  for (let i = 0; i < (await fetchLastJob()); i++) {\n    const job = await contract.methods.services(i).call();\n    services.push(job);\n  }\n\n  thisObject.setState({\n    services: JSON.stringify(services)\n  });\n};\n\nconst fetchJobImage = async thisObject => {\n  const imageName = await contract.methods.getDockerImage(thisObject.state.getDockerImage.imageName).call();\n  thisObject.setState({\n    image: imageName\n  });\n};\n\nconst fetchIsImageApprovedForDSP = async thisObject => {\n  const approvedImage = await contract.methods.isImageApprovedForDSP(thisObject.state.isImageApprovedForDSP.imageName).call();\n  thisObject.setState({\n    approvedImage\n  });\n};\n\nconst fetchPortForDSP = async thisObject => {\n  const port = await contract.methods.getPortForDSP(thisObject.state.getPortForDSP.jobID, thisObject.state.getPortForDSP.dsp).call();\n  thisObject.setState({\n    port\n  });\n};\n\nconst fetchEndpointForDSP = async thisObject => {\n  const endpoint = await contract.methods.getDSPEndpoint(thisObject.state.getDSPEndpoint.dsp).call();\n  thisObject.setState({\n    endpoint\n  });\n};\n\nconst postJobOrService = async thisObject => {\n  const abi = returnAbi(\"run\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.run.consumer, thisObject.state.run.imageName, thisObject.state.run.inputFS, thisObject.state.run.args]);\n  await runTrx(data, [\"Run\"], thisObject);\n};\n\nconst runJob = async thisObject => {\n  const abi = returnAbi(\"jobCallback\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.runJob.jobId, thisObject.state.runJob.outputFS, thisObject.state.runJob.dapps]);\n  await runTrx(data, [\"JobResult\", \"JobDone\"], thisObject);\n};\n\nconst runService = async thisObject => {\n  const abi = returnAbi(\"serviceCallback\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.runService.jobId, thisObject.state.runService.port, thisObject.state.runService.serviceDapps]);\n  await runTrx(data, [\"ServiceRunning\"], thisObject);\n};\n\nconst setDockerImage = async thisObject => {\n  const abi = returnAbi(\"setDockerImage\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.setDockerImage.imageName, thisObject.state.setDockerImage.imageAddress, thisObject.state.setDockerImage.imageHash, thisObject.state.setDockerImage.imageType]);\n  await runTrx(data, [\"DockerSet\"], thisObject);\n};\n\nconst approveDockerImage = async thisObject => {\n  const abi = returnAbi(\"approveDockerForDSP\");\n  const data = web3.eth.abi.encodeFunctionCall(abi, [thisObject.state.imageName]);\n  await runTrx(data, [\"DockerApprovalChanged\"], thisObject);\n};\n/*\n     unapproveDockerForDSP\n    deprecateDSP\n    regDSP\n    claimFor\n    sellGas\n    buyGasFor\n    setConsumerCallback\n    setConsumerPermissions\n    setQuorum\n    jobError\n    serviceError\n */\n\n\nconst runTrx = async (data, events, thisObject) => {\n  const trxInfo = {\n    trxHash: null,\n    error: ''\n  };\n  const transactionParameters = {\n    nonce: '0x00',\n    gasPrice: '2000000000',\n    gasLimit: '21000',\n    to: contractAddress,\n    from: ethereum.selectedAddress,\n    value: '0x00',\n    data,\n    chainId: '0x3' // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n\n  };\n\n  if (events.length) {\n    for (const name of events) {\n      subscribeContractEvent(name, thisObject);\n    }\n  }\n\n  await ethereum.request({\n    method: 'eth_sendTransaction',\n    params: [transactionParameters]\n  }).then(result => {\n    trxInfo.trxHash = result;\n  }).catch(error => {\n    trxInfo.error = error;\n  });\n  thisObject.setState({\n    trxInfo\n  });\n};\n\nexport default {\n  fetchJobs,\n  fetchServices,\n  fetchDspInfo,\n  postJobOrService,\n  runJob,\n  runService,\n  setDockerImage,\n  approveDockerImage\n};","map":{"version":3,"sources":["/Users/natanaelprudhomme/Workspaces/dapp-workers/uis/jobs/src/lib/web3/index.js"],"names":["Web3","NexusJSON","jobs","services","provider","providers","WebsocketProvider","web3","contractAddress","contract","eth","Contract","abi","ethereum","window","returnAbi","func","find","el","name","type","subscribeContractEvent","eventName","thisObject","once","error","event","console","log","setState","events","state","fetchLastJob","methods","lastJobID","call","fetchJobs","i","job","push","JSON","stringify","fetchDspInfo","dsp","registeredDSPs","fetchServices","fetchJobImage","imageName","getDockerImage","image","fetchIsImageApprovedForDSP","approvedImage","isImageApprovedForDSP","fetchPortForDSP","port","getPortForDSP","jobID","fetchEndpointForDSP","endpoint","getDSPEndpoint","postJobOrService","data","encodeFunctionCall","run","consumer","inputFS","args","runTrx","runJob","jobId","outputFS","dapps","runService","serviceDapps","setDockerImage","imageAddress","imageHash","imageType","approveDockerImage","trxInfo","trxHash","transactionParameters","nonce","gasPrice","gasLimit","to","from","selectedAddress","value","chainId","length","request","method","params","then","result","catch"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\nimport NexusJSON from '../../abi/Nexus.json';\n\nconst jobs = [];\nconst services = [];\nconst provider = new Web3.providers.WebsocketProvider('ws://localhost:8545');\nconst web3 = new Web3(provider);\nconst contractAddress = \"0x94D387F50569200aDACFd903345D077ef6ABcE11\";\nconst contract = new web3.eth.Contract(NexusJSON.abi,contractAddress);\nconst ethereum = window.ethereum;\n\nconst returnAbi = (func) => {\n    return NexusJSON.abi.find(el => el.name == func && el.type == \"function\");\n}\n\nconst subscribeContractEvent = (eventName,thisObject) => {\n    contract.once(eventName, function(error, event){\n        console.log({ eventName, event, error });\n        thisObject.setState({events: [...thisObject.state.events, { eventName, event, error }]});\n    });\n}\n\nconst fetchLastJob = async () => {\n    return await contract.methods.lastJobID().call();\n}\n\nconst fetchJobs = async (thisObject) => {\n    for(let i=0; i < await fetchLastJob(); i++) {\n        const job = await contract.methods.jobs(i).call();\n        jobs.push(job);\n    }\n    thisObject.setState({jobs: JSON.stringify(jobs)});\n}\n\nconst fetchDspInfo = async (dsp) => {\n    console.log(await contract.methods.registeredDSPs(dsp).call());\n    // return await contract.methods.registeredDSPs(dsp).call();\n}\n\nconst fetchServices = async (thisObject) => {\n    for(let i=0; i < await fetchLastJob(); i++) {\n        const job = await contract.methods.services(i).call();\n        services.push(job);\n    }\n    thisObject.setState({services: JSON.stringify(services)});\n}\n\nconst fetchJobImage = async (thisObject) => {\n    const imageName = await contract.methods.getDockerImage(\n        thisObject.state.getDockerImage.imageName\n    ).call();\n    thisObject.setState({image: imageName});\n}\n\nconst fetchIsImageApprovedForDSP = async (thisObject) => {\n    const approvedImage = await contract.methods.isImageApprovedForDSP(\n        thisObject.state.isImageApprovedForDSP.imageName\n    ).call();\n    thisObject.setState({approvedImage});\n}\n\nconst fetchPortForDSP = async (thisObject) => {\n    const port = await contract.methods.getPortForDSP(\n        thisObject.state.getPortForDSP.jobID,\n        thisObject.state.getPortForDSP.dsp\n    ).call();\n    thisObject.setState({port});\n}\n\nconst fetchEndpointForDSP = async (thisObject) => {\n    const endpoint = await contract.methods.getDSPEndpoint(\n        thisObject.state.getDSPEndpoint.dsp\n    ).call();\n    thisObject.setState({endpoint});\n}\n\nconst postJobOrService = async (thisObject) => {\n    const abi = returnAbi(\"run\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.run.consumer,\n        thisObject.state.run.imageName,\n        thisObject.state.run.inputFS,\n        thisObject.state.run.args\n    ]);\n    await runTrx(data,[\"Run\"],thisObject);\n}\n\nconst runJob = async (thisObject) => {\n    const abi = returnAbi(\"jobCallback\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.runJob.jobId,\n        thisObject.state.runJob.outputFS,\n        thisObject.state.runJob.dapps\n    ]);\n    await runTrx(data,[\"JobResult\",\"JobDone\"],thisObject);\n}\n\nconst runService = async (thisObject) => {\n    const abi = returnAbi(\"serviceCallback\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.runService.jobId,\n        thisObject.state.runService.port,\n        thisObject.state.runService.serviceDapps\n    ]);\n    await runTrx(data,[\"ServiceRunning\"],thisObject);\n}\n\nconst setDockerImage = async (thisObject) => {\n    const abi = returnAbi(\"setDockerImage\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.setDockerImage.imageName,\n        thisObject.state.setDockerImage.imageAddress,\n        thisObject.state.setDockerImage.imageHash,\n        thisObject.state.setDockerImage.imageType\n    ]);\n    await runTrx(data,[\"DockerSet\"],thisObject);\n}\n\nconst approveDockerImage = async (thisObject) => {\n    const abi = returnAbi(\"approveDockerForDSP\");\n    const data = web3.eth.abi.encodeFunctionCall(abi, [\n        thisObject.state.imageName\n    ]);\n    await runTrx(data,[\"DockerApprovalChanged\"],thisObject);\n}\n\n    /*\n\n        unapproveDockerForDSP\n        deprecateDSP\n        regDSP\n        claimFor\n        sellGas\n        buyGasFor\n        setConsumerCallback\n        setConsumerPermissions\n        setQuorum\n        jobError\n        serviceError\n\n    */\n\nconst runTrx = async (data,events,thisObject) => {\n    const trxInfo = {\n        trxHash: null,\n        error: ''\n    };\n    const transactionParameters = {\n        nonce: '0x00',\n        gasPrice: '2000000000',\n        gasLimit: '21000',\n        to: contractAddress,\n        from: ethereum.selectedAddress,\n        value: '0x00',\n        data,\n        chainId: '0x3', // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n    };\n    if(events.length) {\n        for(const name of events) {\n            subscribeContractEvent(name,thisObject);\n        }\n    }\n    await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n    })\n    .then((result) => {\n        trxInfo.trxHash = result;\n    })\n    .catch((error) => {\n        trxInfo.error = error;\n    });\n    thisObject.setState({trxInfo});\n}\n\nexport default { \n    fetchJobs,\n    fetchServices,\n    fetchDspInfo,\n    postJobOrService,\n    runJob,\n    runService,\n    setDockerImage,\n    approveDockerImage\n}"]},"metadata":{},"sourceType":"module"}